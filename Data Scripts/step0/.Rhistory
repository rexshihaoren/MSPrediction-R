if (class(x) == "numeric" | class(x) == "integer") {
x/max(x, na.rm = TRUE)
}
else if (class(x) == "factor") {
if (any(is.na(suppressWarnings(as.numeric(levels(x)))))) {
(as.numeric(x)-1) / (length(levels(x))-1)
}
else {
as.numeric(levels(x))[x] / max(as.numeric(levels(x)))
}
}
else {
x
}
}))
}
## return the correlation matrix for the dataframe and draw the heatmap for it excluding the VasitId
get_person_cor = function(dataFrame, columns, tableName, heatMapName) {
cats = names(dataFrame)
cats = cats[!(cats %in% columns)]
person_cor = matrix(nrow = length(cats), ncol = length(cats), byrow = TRUE, dimnames = list(cats, cats) )
## fill in the cor table and print out the tables
pdf(paste(dir_to_store, tableName, ".pdf", sep = ""))
for (var1 in cats){
for (var2 in cats){
plot(table(dataFrame[[var1]], dataFrame[[var2]]), main = paste("table of ", var2, " ~ ", var1), )
person_cor[var1, var2] = cor(dataFrame[[var1]], dataFrame[[var2]], use = "complete.obs", method = "pearson")
}
}
dev.off()
## print the heatmap for the correlation
png(paste(dir_to_store, heatMapName, ".png", sep = ""), 1000, 900)
pheatmap(person_cor, clustering_distance_rows=as.dist((1-person_cor^2)), clustering_distance_cols=as.dist(1-person_cor^2),
cluster_rows=T, cluster_cols = T,
breaks=seq(-1, 1, 0.1),
color = colorRampPalette(c("darkblue", "blue", "lightblue", "white", "wheat", "orange", "firebrick"))(20),
legend = TRUE,
main = paste("Person's correlation for: ", heatMapName), display_numbers = T, fontsize= 12)
dev.off()
return (person_cor)
}
##########################
## Analysis of fam only ##
##########################
##############################################################
## STEP 1: Clean the dataset; Remove unreasonable data and NAs
##############################################################
## Factorize the EOF data
famCats = names(TABLES$fams)
famCats = famCats[famCats != "VisitId"]
fam2 = data.frame("VisitId" = TABLES$fams$VisitId, lapply(TABLES$fams[,famCats],factor))
## Only a few NAs. Rows containing NA might not be valid. Should omit these rows for analysis
check_invalid_data(fam2)
fam2 = na.omit(fam2)
## Thinking Slower has a level "21" with only 1 count, might be problem with that. (VID:2456)
## Lossing hope has a level "9" with only 1 count, might be problem with that. (VID: 2767)
lapply(fam2, levels)
fam2 = fam2[(fam2$ThinkingSlower != 21) & (fam2$LosingHope != 9),]
fam2$ThinkingSlower = factor(fam2$ThinkingSlower)
fam2$LosingHope = factor(fam2$LosingHope)
## Check the general pattern of the data
quick_analysis_table(fam2)
####################################################
## STEP 2: Find the correlation between 2 parameters
####################################################
fam3 = to_01_scale(fam2, c("VisitId"))
person_cor = get_person_cor(fam3, "VisitId", "fam", "fam")
######################
## Analysis of fssc ##
######################
##############################################################
## STEP 1: Clean the dataset; Remove unreasonable data and NAs
##############################################################
## Factorize the EOF data
fssc3 = data.frame(lapply(fssc2, factor))
## 10% of the rows contains NAs, not going to delete all NAs
length(check_invalid_data(fssc3))
## check the levels of the data. Valid
lapply(fssc3, levels)
## Check the general pattern of the data
quick_analysis_table(fssc3)
####################################################
## STEP 2: Find the correlation between 2 parameters
####################################################
fssc4 = data.frame("VisitId" = TABLES$fssc$VisitId,
mapply(function(x, y) (as.numeric(x) - 1) / y, fssc3, limits[names(fssc3)]))
person_cor = get_person_cor(fssc4, "VisitId", "fssc", "fssc")
################################
## STEP 3: Combine fams and fssc
################################
fams_fssc = merge(fam3, fssc4, by = "VisitId", all.x = TRUE, all.y= TRUE)
person_cor = get_person_cor(fams_fssc, "VisitId","fams_fssc", "fams_fssc")
#######################################################
## Analysis of parameters in Visit and other tables  ##
#######################################################
##############################################################
## STEP 1: Clean the dataset; Remove unreasonable data and NAs
##############################################################
## Getting the data
visitnames <- c('VisitID',
'EPICID',
'Gender',
'ActualEDSS',
'AgeAtExam',
'DiseaseDuration',
'DiseaseType',
'DiseaseCourse',
'MotorWeakness',
'SensoryDisturbance',
'Ataxia',
'BladderDisturbance',
'BowelDisturbance',
'CogDisturbance',
'VisualLoss')
visit3 = fullTable3[,visitnames]
names(visit3)[names(visit3)=="VisitID"] = "VisitId"
## 10% of DiseaseType are NAs, probability not a good parameter for analysis
## A few NAs in Ataxia(6) and VisualLoss(16).
check_invalid_data(visit3)
## check the levels of the data.
## Gender should be a factor
## VisualLoss should be leveled as NO, UNI, BI
## Check ActualEDSS, AgeAtExam, DiseaseDuration are valid
lapply(visit3, levels)
visit3$Gender = factor(visit3$Gender)
visit3$VisualLoss = factor(visit3$VisualLoss, levels = c("NO", "UNI", "BI"))
summary(visit3$ActualEDSS)
summary(visit3$AgeAtExam)
summary(visit3$DiseaseDuration)
## Check the general pattern of the data
quick_analysis_table(visit3)
####################################################
## STEP 2: Find the correlation between 2 parameters
####################################################
visit4 = to_01_scale(visit3, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"))
person_cor = get_person_cor(visit4, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"), "visit", "visit")
##################################
## STEP 3: Combine visit with fam
##################################
visit_fam = merge(visit4, fam3, by = "VisitId", all.x = TRUE)
person_cor = get_person_cor(visit_fam, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"), "visit_fam", "visit_fam")
##################################
## STEP 4: Combine visit with fam
##################################
visit_fssc = merge(visit4, fssc4, by = "VisitId", all.x = TRUE)
person_cor = get_person_cor(visit_fssc, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"), "visit_fssc", "visit_fssc")
#############################
## STEP 5: Combine everything
#############################
allQOL = merge(visit4, fams_fssc, by = "VisitId", all.x = TRUE)
person_cor = get_person_cor(allQOL, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"),"allQOL", "allQOL")
load("/media/sunnymh/Work/BioScreen/step0/result.RData")
rm(eduweight2, fT, fT2, fullTable, fullTable2, fullTable32, fullTable33, fullTable4, fullTableRAW)
rm(con, createTable, db, n_tables, s_table, tablenames)
fix(removeFields)
rm(addplotNAData,addplotSummary, error_detect, find_field, get_omd, parse_date, plotFactor, plot_col, plotText, quick_analysis_table, removeFields)
rm(subject2)
require(grid)
require(pheatmap)
dir_to_store =
"/media/sunnymh/Work/BioScreen/step1/"
# "/media/FD/BIOSCREEN/R/"
## return the row numbers for wich contains NA, NULL or NAN
check_invalid_data = function(dataFrame){
lapply(
dataFrame,
function(x){
seq(1:length(x))[is.na(x) | is.nan(x) | is.null(x)]
})
}
## return the dataframe in [0, 1] scale for all the factors and numeric except some columns
to_01_scale = function(dataFrame, columns) {
cats = names(dataFrame)
cats = cats[!(cats %in% columns)]
data.frame(subset(dataFrame, select= columns),
lapply(
dataFrame[, cats],
function(x){
if (class(x) == "numeric" | class(x) == "integer") {
x/max(x, na.rm = TRUE)
}
else if (class(x) == "factor") {
if (any(is.na(suppressWarnings(as.numeric(levels(x)))))) {
(as.numeric(x)-1) / (length(levels(x))-1)
}
else {
as.numeric(levels(x))[x] / max(as.numeric(levels(x)))
}
}
else {
x
}
}))
}
## return the correlation matrix for the dataframe and draw the heatmap for it excluding the VasitId
get_person_cor = function(dataFrame, columns, tableName, heatMapName) {
cats = names(dataFrame)
cats = cats[!(cats %in% columns)]
person_cor = matrix(nrow = length(cats), ncol = length(cats), byrow = TRUE, dimnames = list(cats, cats) )
## fill in the cor table and print out the tables
pdf(paste(dir_to_store, tableName, ".pdf", sep = ""))
for (var1 in cats){
for (var2 in cats){
plot(table(dataFrame[[var1]], dataFrame[[var2]]), main = paste("table of ", var2, " ~ ", var1), )
person_cor[var1, var2] = cor(dataFrame[[var1]], dataFrame[[var2]], use = "complete.obs", method = "pearson")
}
}
dev.off()
## print the heatmap for the correlation
png(paste(dir_to_store, heatMapName, ".png", sep = ""), 1000, 900)
pheatmap(person_cor, clustering_distance_rows=as.dist((1-person_cor^2)), clustering_distance_cols=as.dist(1-person_cor^2),
cluster_rows=T, cluster_cols = T,
breaks=seq(-1, 1, 0.1),
color = colorRampPalette(c("darkblue", "blue", "lightblue", "white", "wheat", "orange", "firebrick"))(20),
legend = TRUE,
main = paste("Person's correlation for: ", heatMapName), display_numbers = T, fontsize= 12)
dev.off()
return (person_cor)
}
##########################
## Analysis of fam only ##
##########################
##############################################################
## STEP 1: Clean the dataset; Remove unreasonable data and NAs
##############################################################
## Factorize the EOF data
famCats = names(TABLES$fams)
famCats = famCats[famCats != "VisitId"]
fam2 = data.frame("VisitId" = TABLES$fams$VisitId, lapply(TABLES$fams[,famCats],factor))
## Only a few NAs. Rows containing NA might not be valid. Should omit these rows for analysis
check_invalid_data(fam2)
fam2 = na.omit(fam2)
## Thinking Slower has a level "21" with only 1 count, might be problem with that. (VID:2456)
## Lossing hope has a level "9" with only 1 count, might be problem with that. (VID: 2767)
lapply(fam2, levels)
fam2 = fam2[(fam2$ThinkingSlower != 21) & (fam2$LosingHope != 9),]
fam2$ThinkingSlower = factor(fam2$ThinkingSlower)
fam2$LosingHope = factor(fam2$LosingHope)
## Check the general pattern of the data
# quick_analysis_table(fam2)
####################################################
## STEP 2: Find the correlation between 2 parameters
####################################################
fam3 = to_01_scale(fam2, c("VisitId"))
person_cor = get_person_cor(fam3, "VisitId", "fam", "fam")
######################
## Analysis of fssc ##
######################
##############################################################
## STEP 1: Clean the dataset; Remove unreasonable data and NAs
##############################################################
## Factorize the EOF data
fssc3 = data.frame(lapply(fssc2, factor))
## 10% of the rows contains NAs, not going to delete all NAs
length(check_invalid_data(fssc3))
## check the levels of the data. Valid
lapply(fssc3, levels)
## Check the general pattern of the data
# quick_analysis_table(fssc3)
####################################################
## STEP 2: Find the correlation between 2 parameters
####################################################
fssc4 = data.frame("VisitId" = TABLES$fssc$VisitId,
mapply(function(x, y) (as.numeric(x) - 1) / y, fssc3, limits[names(fssc3)]))
person_cor = get_person_cor(fssc4, "VisitId", "fssc", "fssc")
################################
## STEP 3: Combine fams and fssc
################################
fams_fssc = merge(fam3, fssc4, by = "VisitId", all.x = TRUE, all.y= TRUE)
person_cor = get_person_cor(fams_fssc, "VisitId","fams_fssc", "fams_fssc")
#######################################################
## Analysis of parameters in Visit and other tables  ##
#######################################################
##############################################################
## STEP 1: Clean the dataset; Remove unreasonable data and NAs
##############################################################
## Getting the data
visitnames <- c('VisitID',
'EPICID',
'Gender',
'ActualEDSS',
'AgeAtExam',
'DiseaseDuration',
'DiseaseType',
'DiseaseCourse',
'MotorWeakness',
'SensoryDisturbance',
'Ataxia',
'BladderDisturbance',
'BowelDisturbance',
'CogDisturbance',
'VisualLoss')
visit3 = fullTable3[,visitnames]
names(visit3)[names(visit3)=="VisitID"] = "VisitId"
## 10% of DiseaseType are NAs, probability not a good parameter for analysis
## A few NAs in Ataxia(6) and VisualLoss(16).
check_invalid_data(visit3)
## check the levels of the data.
## Gender should be a factor
## VisualLoss should be leveled as NO, UNI, BI
## Check ActualEDSS, AgeAtExam, DiseaseDuration are valid
lapply(visit3, levels)
visit3$Gender = factor(visit3$Gender)
visit3$VisualLoss = factor(visit3$VisualLoss, levels = c("NO", "UNI", "BI"))
summary(visit3$ActualEDSS)
summary(visit3$AgeAtExam)
summary(visit3$DiseaseDuration)
## Check the general pattern of the data
# quick_analysis_table(visit3)
####################################################
## STEP 2: Find the correlation between 2 parameters
####################################################
visit4 = to_01_scale(visit3, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"))
person_cor = get_person_cor(visit4, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"), "visit", "visit")
##################################
## STEP 3: Combine visit with fam
##################################
visit_fam = merge(visit4, fam3, by = "VisitId", all.x = TRUE)
person_cor = get_person_cor(visit_fam, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"), "visit_fam", "visit_fam")
##################################
## STEP 4: Combine visit with fam
##################################
visit_fssc = merge(visit4, fssc4, by = "VisitId", all.x = TRUE)
person_cor = get_person_cor(visit_fssc, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"), "visit_fssc", "visit_fssc")
#############################
## STEP 5: Combine everything
#############################
allQOL = merge(visit4, fams_fssc, by = "VisitId", all.x = TRUE)
person_cor = get_person_cor(allQOL, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"),"allQOL", "allQOL")
load("/media/sunnymh/Work/BioScreen/step0/result.RData")
rm(eduweight2, fT, fT2, fullTable, fullTable2, fullTable32, fullTable33, fullTable4, fullTableRAW, subject2)
rm(con, createTable, db, n_tables, s_table, tablenames)
rm(addplotNAData,addplotSummary, error_detect, find_field, get_omd, parse_date, plotFactor, plot_col, plotText, quick_analysis_table, removeFields)
rm(dir_to_get)
save.image("/media/sunnymh/Work/BioScreen/step1/ini.RData")
require(grid)
require(pheatmap)
current_dir =
"/media/sunnymh/Work/BioScreen/step1/"
# "/media/FD/BIOSCREEN/R/"
## return the row numbers for wich contains NA, NULL or NAN
check_invalid_data = function(dataFrame){
lapply(
dataFrame,
function(x){
seq(1:length(x))[is.na(x) | is.nan(x) | is.null(x)]
})
}
## return the dataframe in [0, 1] scale for all the factors and numeric except some columns
to_01_scale = function(dataFrame, columns) {
cats = names(dataFrame)
cats = cats[!(cats %in% columns)]
data.frame(subset(dataFrame, select= columns),
lapply(
dataFrame[, cats],
function(x){
if (class(x) == "numeric" | class(x) == "integer") {
x/max(x, na.rm = TRUE)
}
else if (class(x) == "factor") {
if (any(is.na(suppressWarnings(as.numeric(levels(x)))))) {
(as.numeric(x)-1) / (length(levels(x))-1)
}
else {
as.numeric(levels(x))[x] / max(as.numeric(levels(x)))
}
}
else {
x
}
}))
}
## return the correlation matrix for the dataframe and draw the heatmap for it excluding the VasitId
get_person_cor = function(dataFrame, columns, tableName, heatMapName) {
cats = names(dataFrame)
cats = cats[!(cats %in% columns)]
person_cor = matrix(nrow = length(cats), ncol = length(cats), byrow = TRUE, dimnames = list(cats, cats) )
## fill in the cor table and print out the tables
pdf(paste(current_dir, tableName, ".pdf", sep = ""))
for (var1 in cats){
for (var2 in cats){
plot(table(dataFrame[[var1]], dataFrame[[var2]]), main = paste("table of ", var2, " ~ ", var1), )
person_cor[var1, var2] = cor(dataFrame[[var1]], dataFrame[[var2]], use = "complete.obs", method = "pearson")
}
}
dev.off()
## print the heatmap for the correlation
png(paste(current_dir, heatMapName, ".png", sep = ""), 1000, 900)
pheatmap(person_cor, clustering_distance_rows=as.dist((1-person_cor^2)), clustering_distance_cols=as.dist(1-person_cor^2),
cluster_rows=T, cluster_cols = T,
breaks=seq(-1, 1, 0.1),
color = colorRampPalette(c("darkblue", "blue", "lightblue", "white", "wheat", "orange", "firebrick"))(20),
legend = TRUE,
main = paste("Person's correlation for: ", heatMapName), display_numbers = T, fontsize= 12)
dev.off()
return (person_cor)
}
##########################
## Analysis of fam only ##
##########################
##############################################################
## STEP 1: Clean the dataset; Remove unreasonable data and NAs
##############################################################
## Factorize the EOF data
famCats = names(TABLES$fams)
famCats = famCats[famCats != "VisitId"]
fam2 = data.frame("VisitId" = TABLES$fams$VisitId, lapply(TABLES$fams[,famCats],factor))
## Only a few NAs. Rows containing NA might not be valid. Should omit these rows for analysis
check_invalid_data(fam2)
fam2 = na.omit(fam2)
## Thinking Slower has a level "21" with only 1 count, might be problem with that. (VID:2456)
## Lossing hope has a level "9" with only 1 count, might be problem with that. (VID: 2767)
lapply(fam2, levels)
fam2 = fam2[(fam2$ThinkingSlower != 21) & (fam2$LosingHope != 9),]
fam2$ThinkingSlower = factor(fam2$ThinkingSlower)
fam2$LosingHope = factor(fam2$LosingHope)
## Check the general pattern of the data
# quick_analysis_table(fam2)
####################################################
## STEP 2: Find the correlation between 2 parameters
####################################################
fam3 = to_01_scale(fam2, c("VisitId"))
person_cor = get_person_cor(fam3, "VisitId", "fam", "fam")
######################
## Analysis of fssc ##
######################
##############################################################
## STEP 1: Clean the dataset; Remove unreasonable data and NAs
##############################################################
## Factorize the EOF data
fssc3 = data.frame(lapply(fssc2, factor))
## 10% of the rows contains NAs, not going to delete all NAs
length(check_invalid_data(fssc3))
## check the levels of the data. Valid
lapply(fssc3, levels)
## Check the general pattern of the data
# quick_analysis_table(fssc3)
####################################################
## STEP 2: Find the correlation between 2 parameters
####################################################
fssc4 = data.frame("VisitId" = TABLES$fssc$VisitId,
mapply(function(x, y) (as.numeric(x) - 1) / y, fssc3, limits[names(fssc3)]))
person_cor = get_person_cor(fssc4, "VisitId", "fssc", "fssc")
################################
## STEP 3: Combine fams and fssc
################################
fams_fssc = merge(fam3, fssc4, by = "VisitId", all.x = TRUE, all.y= TRUE)
person_cor = get_person_cor(fams_fssc, "VisitId","fams_fssc", "fams_fssc")
#######################################################
## Analysis of parameters in Visit and other tables  ##
#######################################################
##############################################################
## STEP 1: Clean the dataset; Remove unreasonable data and NAs
##############################################################
## Getting the data
visitnames <- c('VisitID',
'EPICID',
'Gender',
'ActualEDSS',
'AgeAtExam',
'DiseaseDuration',
'DiseaseType',
'DiseaseCourse',
'MotorWeakness',
'SensoryDisturbance',
'Ataxia',
'BladderDisturbance',
'BowelDisturbance',
'CogDisturbance',
'VisualLoss')
visit3 = fullTable3[,visitnames]
names(visit3)[names(visit3)=="VisitID"] = "VisitId"
## 10% of DiseaseType are NAs, probability not a good parameter for analysis
## A few NAs in Ataxia(6) and VisualLoss(16).
check_invalid_data(visit3)
## check the levels of the data.
## Gender should be a factor
## VisualLoss should be leveled as NO, UNI, BI
## Check ActualEDSS, AgeAtExam, DiseaseDuration are valid
lapply(visit3, levels)
visit3$Gender = factor(visit3$Gender)
visit3$VisualLoss = factor(visit3$VisualLoss, levels = c("NO", "UNI", "BI"))
summary(visit3$ActualEDSS)
summary(visit3$AgeAtExam)
summary(visit3$DiseaseDuration)
## Check the general pattern of the data
# quick_analysis_table(visit3)
####################################################
## STEP 2: Find the correlation between 2 parameters
####################################################
visit4 = to_01_scale(visit3, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"))
person_cor = get_person_cor(visit4, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"), "visit", "visit")
##################################
## STEP 3: Combine visit with fam
##################################
visit_fam = merge(visit4, fam3, by = "VisitId", all.x = TRUE)
person_cor = get_person_cor(visit_fam, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"), "visit_fam", "visit_fam")
##################################
## STEP 4: Combine visit with fam
##################################
visit_fssc = merge(visit4, fssc4, by = "VisitId", all.x = TRUE)
person_cor = get_person_cor(visit_fssc, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"), "visit_fssc", "visit_fssc")
#############################
## STEP 5: Combine everything
#############################
allQOL = merge(visit4, fams_fssc, by = "VisitId", all.x = TRUE)
person_cor = get_person_cor(allQOL, c("VisitId", "EPICID", "DiseaseType", "DiseaseCourse"),"allQOL", "allQOL")
names(QOL)
names(allQOL)
get_person_cor
?get_person_cor
?cor
