sd=sqrt(200/4)
pnorm((100.5-100)/sd)-pnorm((99.5-100)/sd)
e^(100) * 100^0
exp(100) * 100^0
exp(-100) * 100^0
exp(-0.0567198*30)
3exp(-2)
3*exp(-2)
2*exp(-2)
1-5*exp(-2)
6*exp(-4)
exp(5/3) *(5/3)^2 /2
exp(.5) *(.6)^2 /2
exp(.5) *(.6)
exp(.6) *(.6)
exp(.6) *(.6)^2/2
exp(.6) *(.6)
exp(-5/3) *(5/3)^2 /2
exp(-5/3) *(5/3)
exp(-5/3) *(5/3)
exp(-5/3)
exp(-5/3) *8/3
load("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts/step3/data.RData")
str(allQOL)
ls
ls()
str(fam2)
str(fam)
str(fams)
load("./step1/result.RData")
load("step1/result.RData")
load("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts/step1/result.RData")
ls()
str(allQOL)
load("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts/step0/result.RData")
...
install.packages("xlsx")
install.packages("foreign")
install.packages("foreach")
install.packages("multicore")
install.packages("XML")
install.packages("googleVis")
install.packages("reshape")
install.packages("xlsx")
install.packages("foreign")
install.packages("foreign")
"foreach"
install.packages("foreach")
install.packages("foreach")
install.packages("multicore")
install.packages(c("lattice", "Matrix", "mgcv", "nlme", "rpart", "survival"))
install.packages("XML")
install.packages("googleVis")
install.packages("googleVis")
install.packages("reshape")
library("spatial", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("splines", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("multicore", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("parallel", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("XML", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("reshape", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("foreach", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
ls()
for g in c(4:7){}
1808/2187
require(ggplot2)
require(rhdf5)
pnorm(1.363)
1-pnorm(1.3363)
1-pnorm(.3095800853708794)
1-pnorm(1.3095800853708794)
pnorm(.1)-pnorm(-.1)
13^2/15^2
13^2/15^2*.5
1-(5/15)^10
1+(5/15)^10-2*(10/15)^10
x=1
y =5*.5^4*x-x^5/5
x=.5
x =1
x = .5
y2 =5*.5^4*x-x^5/5
y2-y1
y2-y
x =1
y =5*.5^4*x-x^5
y2 =5*.5^4*x-x^5
x=.5
y2 =5*.5^4*x-x^5
y2=y
y2 =5*.5^4*x-x^5
y2-y
31/32
y2 =-5*.5^4*x+x^5
x=1
y =-5*.5^4*x+x^5
y-y2
31/32
5(1/5-.5^4-(.5^5/5-.5^5))
u=5(1/5-.5^4-(.5^5/5-.5^5))
5(1/5-.5^4-(.5^5/5-.5^5)))
pnorm(5/sqrt(13))
1-pnorm(5/sqrt(13))
2pnorm(1)-pnorm(1)^2
2*pnorm(1)-pnorm(1)^2
pnorm(1)-pnorm(-1)
pnorm(1/sqrt(2))
pnorm(1)-pnorm(-1)
pnorm(2000/sqrt(2000000))
1-pnorm(2000/sqrt(2000000))
1-pnorm(1.41
)
(1-pnorm(1))*(1-pnorm(-1))
###### Add more Previous year parameters to diagno #######
####### Load more features from fullTable32 and DMT #########
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
load("step0/result.RData")
load(psPath)
DMT<-read.table("tableDMT.csv")
file.create(ppPath)
####### reconstruct previous year parameters ########
ppnames <- c("DiseaseDuration", "Siena_PBVC", "New_T2_Lesions")
pp <- fullTable32[c("VisitID", "ExamDate", "EPICID", ppnames)]
#pp <- merge(DMT[c("VisitID", "TreatmentMolecule", "TreatmentType")], pp)
pp[, "Siena_PBVCRate"] <- NA
pp[, "PrevSiena_PBVC"] <- NA
pp[, "PrevSiena_PBVCRate"] <- NA
#pp[, "PrevTreatmentM"] <- NA
#pp[, "PrevTreatmentT"] <- NA
pp[, "PrevDiseaseDuration"] <- NA
pp[, "PrevNew_T2_Lesions"]<-NA
pp[order(pp$EPICID, pp$ExamDate),]
nvisits <- nrow(pp)
for(i in 1:(nvisits-1)){
dSPBVC <- pp[i+1, "Siena_PBVC"] - pp[i, "Siena_PBVC"]
dDay <-as.numeric(as.Date(pp[i+1,]$ExamDate) - as.Date(pp[i,]$ExamDate))
dYear <- dDay/365
if (pp[i+1, "EPICID"] == pp[i, "EPICID"] ){
pp[i+1, "Siena_PBVCRate"] <- dSPBVC/dYear
pp[i+1, "PrevSiena_PBVC"] <- pp[i, "Siena_PBVC"]
pp[i+1, "PrevSiena_PBVCRate"] <- pp[i, "Siena_PBVCRate"]
pp[i+1, "PrevDiseaseDuration"] <- pp[i, "DiseaseDuration"]
pp[i+1, "PrevNew_T2_Lesions"]<-pp[i, "New_T2_Lesions"]
#pp[i+1, "PrevTreatmentM"] <- pp[i+1, "TreatmentMolecule"]
#p[i+1, "PrevTreatmentT"] <- pp[i+1, "TreatmentType"]
}
}
hist([1,2,3,4,5,3,2])
hist(c(1,2,3,4,5,3,2)
)
hist(p[["PrevNew_T2+Lesions"]])
hist(pp[["PrevNew_T2+Lesions"]])
hist(as.numeric(pp[["PrevNew_T2+Lesions"]]))
hist(as.numeric(pp[["PrevNew_T2+Lesions"]]), breaks = .1)
hist(as.numeric(pp[["PrevNew_T2+Lesions"]]), breaks = 100)
hist(as.numeric(pp[["PrevNew_T2+Lesions"]]), breaks = 10)
hist(as.numeric(pp[["PrevNew_T2+Lesions"]]), breaks = 1)
hist(as.numeric(pp[["PrevNew_T2+Lesions"]]), breaks = 5)
ggplot(pp) + geom_density(aes_string(x="PrevSiena_PBVC"))
ggplot(pp) + geom_density(aes_string(x="PrevNew_T2_Lesions"))
View(pp)
View(pp)
### Save #####
save(diagnopp, ppidd, file=ppPath)
h5write(diagnopp, filePath,"diagnopp")
file.copy(filePath, filePathPython, overwrite = TRUE)
#Remove
pp <- pp[, ! colnames(pp) %in% c("Siena_PBVC", "DiseaseDuration", "New_T2_Lesions")]
#Siena_PBVC remove 0 or NA
pp <- pp[pp["PrevSiena_PBVC"]!=0, ]
pp <- pp[!is.na(pp["PrevSiena_PBVC"]), ]
# merge with psidd
ppnoNA<-merge(pp,psidd)
ppnoNA<-ppnoNA[complete.cases(ppnoNA),]
# Seperate those with EPICID, VisitID and ExamDate and those without
ppidd <- ppnoNA
diagnopp <-ppnoNA[, !(names(ppnoNA)%in%c("ExamDate","VisitID", "EPICID"))]
### Save #####
save(diagnopp, ppidd, file=ppPath)
h5write(diagnopp, filePath,"diagnopp")
file.copy(filePath, filePathPython, overwrite = TRUE)
as.numeric(diagnopp)
data.frame(diagnopp)
a<-data.frame(diagnopp
)
View(a)
View(a)
diagnopp<-sapply(diagnopp, as.numeric)
View(diagnopp)
View(diagnopp)
###### Binarize fam2, modfam2 "EnjoyLife" Coloumn, w/ possible Dataprocessing to force data value to 0 to 1########
# Create
# Family of modfam2
# Family of fam2
# merged (merged from modfam2, fam2, and fullTalbe3)
# #######################################################
#
##### Set up ####################
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
if (! f){
file.remove(filePath)
h5createFile(filePath)
}
# create RData path
file.create(binarizePath)
#############################################
# get modified-fam2
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
####### Merge fam2, modfam2, fullTable3 ######
#First change fam2 colname "VisitId" to "VisitID"
fam2 <- rename(fam2, c("VisitId"="VisitID"))
# colnames(fam2)[colnames(fam2) == "VisitId"] <- "VisitID"
# For modfam2, get rid of column "X", and change "RelativePain" column to "modRelativePain" to avoid confusion when merging modfam2 and fam2
modfam2["X"] <- NULL
modfam2 <- rename(modfam2, c("RelativePain" = "modRelativePain"))
merged <- merge(fam2, modfam2)
merged <- merge(merged, fullTable3)
# For modfam2, only preserve 5 cols for analytic purpose: group1~3, relative-pain, enjoylife
modfam2<-modfam2[c("group1", "group2", "group3", "modRelativePain","EnjoyLife")]
# For fam2, get rid of VisitID
fam2["VisitID"]<- NULL
# Binarize
modfam2_bin <-Binarize(modfam2, "EnjoyLife")
fam2_bin <- Binarize(fam2, "EnjoyLife")
modfam2_processing <- DataProcessing(modfam2_bin, "EnjoyLife")
fam2_processing <- DataProcessing(fam2_bin, "EnjoyLife")
# Save fam2, modfam2, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, and  merged in HDF5 format
save(fam2, modfam2, merged, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, fullTable3, file=binarizePath)
h5write(fam2, filePath,"fam2")
h5write(modfam2,filePath,"modfam2")
h5write(merged, filePath, "merged")
h5write(fam2_bin, filePath,"fam2_bin")
h5write(modfam2_bin, filePath,"modfam2_bin")
h5write(modfam2_processing, filePath,"modfam2_processing")
h5write(fam2_processing, filePath,"fam2_processing")
# Copy predData.h5 to python folder
file.copy(filePath, filePathPython, overwrite = TRUE)
#############################################################
################# EDSS and Disgnostic ##################
## This should follow binarize.r ran ###
source("helper.r")
# merged <- h5read(filePath, "merged")
# fam2<-h5read(filePath, "fam2")
# modfam2 <- h5read (filePath, "modfam2")
load(binarizePath)
file.create(diagnoPath)
##################Calculate EDSS Rate + PrevEDSS + PrevEDSSRate cols###########
merged_updated <- merged[order(merged$EPICID, merged$ExamDate),]
##Treatment##
# DMT described all the treatment
DMT<-read.table("tableDMT.csv")
#DMTex <-DMT[,c("VisitID","START", "END", "TreatmentID")]
# List of all VisitIDs
DMTVisitIDs <- unique(DMT[["VisitID"]])
# Add Empty EDSSRate, PrevEDSS, PrevEDSSRate, RecTreatment (Recieved treatment)
merged_updated[, "EDSSRate"] <- NA
merged_updated[, "PrevEDSS"] <- NA
merged_updated[, "PrevEDSSRate"] <- NA
merged_updated[, "RecTreatment"] <- NA
nvisits <- nrow(merged_updated)
for(i in 1:(nvisits-1)){
dEDSS <- merged_updated[i+1, "ActualEDSS"] - merged_updated[i, "ActualEDSS"]
dDay <-as.numeric(as.Date(merged_updated[i+1,]$ExamDate) - as.Date(merged_updated[i,]$ExamDate))
dYear <- dDay/365
if (merged_updated[i+1, "EPICID"] == merged_updated[i, "EPICID"] ){
merged_updated[i+1, "EDSSRate"] <- dEDSS/dYear
merged_updated[i+1, "PrevEDSS"] <- merged_updated[i, "ActualEDSS"]
merged_updated[i+1, "PrevEDSSRate"] <- merged_updated[i, "EDSSRate"]
}
merged_updated[i, "RecTreatment"] <- merged_updated[i, "VisitID"] %in% DMTVisitIDs
}
######### Add one column 'ModEDSS' (modified EDSS), denoting whether EDSS increased ########
#if ignore abs dEDSSS < 0.5, or decrease = > Class 0; Otherwise => Class 1
# Add Imprecision col
merged_updated[, "Imprecision"] <- NA
merged_updated[, "ModEDSS"] <- NA
for(i in 1:(nvisits-1)){
dEDSS <- merged_updated[i+1, "ActualEDSS"] - merged_updated[i, "ActualEDSS"]
dDay <- as.numeric(as.Date(merged_updated[i+1,]$ExamDate) - as.Date(merged_updated[i,]$ExamDate))
dYear <- dDay/365
if (merged_updated[i+1, "EPICID"] == merged_updated[i, "EPICID"] ){
if (abs(dEDSS) <= .5){
merged_updated[i+1, "Imprecision"] <- 1
merged_updated[i+1, "ModEDSS"] <- 0
} else {
merged_updated[i+1, "Imprecision"] <- 0
if (dEDSS< 0){
merged_updated[i+1, "ModEDSS"] <- 0
} else {
merged_updated[i+1, "ModEDSS"] <- 1
}
}
}
}
# DatePrep to use QOL(n) + EDSSRate(n-1) + EDSS(n-1) to predict ModEDSS: Diagnostic, n is exam date #
diagnoColName <- unique(c("VisitID","EPICID", "ExamDate", "PrevEDSS","ActualEDSS", "PrevEDSSRate", "EDSSRate", "ModEDSS", "Imprecision", "RecTreatment", colnames(fam2)))
diagno <- merged_updated[diagnoColName]
#### Question:  Inclusion of mofam2/fam2 in training data & speed tradeoff #####
# Provide alternatives: if for every patient, we do tranformation from fam2 to modfam2, then we only include modfam2 in traning
diagnomodColName <- unique(c("VisitID","EPICID", "ExamDate", "PrevEDSS","ActualEDSS", "PrevEDSSRate", "EDSSRate", "ModEDSS", "Imprecision", "RecTreatment", colnames(modfam2)))
diagnomod <- merged_updated[diagnomodColName]
### In real life, without the Physician, we wouldn't know ActualEDSS (therefore Imprecision) or EDSSRate, we only know PrevEDSSRate, PrevEDSS
# EPICID is useless for prediction as well
drop <- c('ActualEDSS','EDSSRate', 'Imprecision')
diagno <- diagno[,!(names(diagno) %in% drop)]
diagnomod <- diagnomod[,!(names(diagnomod) %in% drop)]
#### For diagnomod, try calculate rate for everything in the targetColList
targetColList <- c("group1","group2", "group3","modRelativePain", "EnjoyLife" )
diagnomodrate <- diagnomod
for (col in targetColList){
diagnomodrate <- calcRate(diagnomodrate, col, "ExamDate", "EPICID")
}
### For diagnomod, we remove patient's initial visit, because for now we can't predict without PrevEDSS;For the patient record with PrevEDSSRate NA, we assume it's 0;
diagnomod<-diagnomod[- which( is.na(diagnomod['PrevEDSS'])),]
diagnomod['PrevEDSSRate'][is.na(diagnomod['PrevEDSSRate']),] <- 0
# same for diagno with fam2 only
diagno<-diagno[- which( is.na(diagno['PrevEDSS'])),]
diagno['PrevEDSSRate'][is.na(diagno['PrevEDSSRate']),] <- 0
### For diagnorate, we remove patient's initial visit, because for now we can't predict without PrevEDSS;For the patient record with PrevEDSSRate NA, we assume it's 0;
diagnomodrate<-diagnomodrate[- which( is.na(diagnomodrate['PrevEDSS'])),]
diagnomodrate['PrevEDSSRate'][is.na(diagnomodrate['PrevEDSSRate']),] <- 0
# Seperate those with EPICID, VisitID and ExamDate and those without
diagnoidd <- diagno
diagno <-diagno[, !(names(diagno)%in%c("ExamDate","VisitID", "EPICID"))]
diagnomodidd <- diagnomod
diagnomod <-diagnomod[, !(names(diagnomod)%in%c("ExamDate","VisitID", "EPICID"))]
diagnomodrateidd <- diagnomodrate
diagnomodrate <-diagnomodrate[, !(names(diagnomodrate)%in%c("ExamDate","VisitID", "EPICID"))]
# Simplified version with only 'PrevEDSS','ModEDSS','PrevEDSSRate'
get <- c('PrevEDSS','ModEDSS','PrevEDSSRate')
diagnosim <- diagno[get]
##### save to diagno.RData ###
save(merged_updated, diagno, diagnoidd, diagnomod, diagnomodidd, diagnomodrate, diagnomodrateidd, diagnosim, file=diagnoPath)
###### h5 save #######
h5write(merged_updated, filePath,"merged_updated")
h5write(diagno, filePath,"diagno")
h5write(diagnoidd, filePath,"diagnoidd")
h5write(diagnomod, filePath,"diagnomod")
h5write(diagnomodidd, filePath,"diagnomodidd")
h5write(diagnomodrate, filePath,"diagnomodrate")
h5write(diagnomodrateidd, filePath,"diagnomodrateidd")
h5write(diagnosim, filePath,"diagnosim")
file.copy(filePath, filePathPython, overwrite = TRUE)
# ####### Add more features from fullTable32 #########
# load("step0/result.RData")
# # patient specific
# pc <- c('AgeOfOnset', 'Gender', 'DRB1_1501', 'OnsetToYr5RelapseCount')
# # pc <- fullTable32[c(features, "VisitID")]
# # previous year parameters (+ Siena_PBVC gradient + meds)
# pp <- c('DiseaseDuration','Siena_PBVC', 'New_T2_Lesions')
###### Add patient specific (ps) to diagno #######
####### Load more features from fullTable32 #########
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
load("step0/result.RData")
load(diagnoPath)
file.create(psPath)
####### merge patient specific (ps) to diagno ###
psnames <- c('AgeOfOnset', 'Gender', 'DRB1_1501', 'OnsetToYr5RelapseCount')
ps <- fullTable32[c(psnames, "VisitID")]
ps <- merge(ps, diagnoidd)
# Seperate those with EPICID, VisitID and ExamDate and those without
psidd <- ps
diagnops <-ps[, !(names(ps)%in%c("ExamDate","VisitID", "EPICID"))]
# digitize gender
diagnops[["Gender"]]<- ifelse(diagnops[["Gender"]] == "M", 1, 0)
### Save #####
save(diagnops, psidd, file=psPath)
h5write(diagnops, filePath,"diagnops")
file.copy(filePath, filePathPython, overwrite = TRUE)
# digitize gender
ps[["Gender"]]<- ifelse(ps[["Gender"]] == "M", 1, 0)
# Seperate those with EPICID, VisitID and ExamDate and those without
psidd <- ps
diagnops <-ps[, !(names(ps)%in%c("ExamDate","VisitID", "EPICID"))]
### Save #####
save(diagnops, psidd, file=psPath)
View(ppidd)
View(ppidd)
View(psidd)
View(psidd)
####### Load more features from fullTable32 and DMT #########
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
load("step0/result.RData")
load(psPath)
DMT<-read.table("tableDMT.csv")
file.create(ppPath)
####### reconstruct previous year parameters ########
ppnames <- c("DiseaseDuration", "Siena_PBVC", "New_T2_Lesions")
pp <- fullTable32[c("VisitID", "ExamDate", "EPICID", ppnames)]
pp[, "Siena_PBVCRate"] <- NA
pp[, "PrevSiena_PBVC"] <- NA
pp[, "PrevSiena_PBVCRate"] <- NA
#pp[, "PrevTreatmentM"] <- NA
#pp[, "PrevTreatmentT"] <- NA
pp[, "PrevDiseaseDuration"] <- NA
pp[, "PrevNew_T2_Lesions"]<-NA
pp[order(pp$EPICID, pp$ExamDate),]
nvisits <- nrow(pp)
for(i in 1:(nvisits-1)){
dSPBVC <- pp[i+1, "Siena_PBVC"] - pp[i, "Siena_PBVC"]
dDay <-as.numeric(as.Date(pp[i+1,]$ExamDate) - as.Date(pp[i,]$ExamDate))
dYear <- dDay/365
if (pp[i+1, "EPICID"] == pp[i, "EPICID"] ){
pp[i+1, "Siena_PBVCRate"] <- dSPBVC/dYear
pp[i+1, "PrevSiena_PBVC"] <- pp[i, "Siena_PBVC"]
pp[i+1, "PrevSiena_PBVCRate"] <- pp[i, "Siena_PBVCRate"]
pp[i+1, "PrevDiseaseDuration"] <- pp[i, "DiseaseDuration"]
pp[i+1, "PrevNew_T2_Lesions"]<-pp[i, "New_T2_Lesions"]
#pp[i+1, "PrevTreatmentM"] <- pp[i+1, "TreatmentMolecule"]
#p[i+1, "PrevTreatmentT"] <- pp[i+1, "TreatmentType"]
}
}
#Remove
pp <- pp[, ! colnames(pp) %in% c("Siena_PBVC", "DiseaseDuration", "New_T2_Lesions")]
#Siena_PBVC remove 0 or NA
pp <- pp[pp["PrevSiena_PBVC"]!=0, ]
pp <- pp[!is.na(pp["PrevSiena_PBVC"]), ]
# merge with psidd
ppnoNA<-merge(pp,psidd)
ppnoNA<-ppnoNA[complete.cases(ppnoNA),]
# Seperate those with EPICID, VisitID and ExamDate and those without
ppidd <- ppnoNA
diagnopp <-ppnoNA[, !(names(ppnoNA)%in%c("ExamDate","VisitID", "EPICID"))]
pp[, "Siena_PBVCRate"] <- NA
pp[, "PrevSiena_PBVC"] <- NA
pp[, "PrevSiena_PBVCRate"] <- NA
#pp[, "PrevTreatmentM"] <- NA
#pp[, "PrevTreatmentT"] <- NA
pp[, "PrevDiseaseDuration"] <- NA
pp[, "PrevNew_T2_Lesions"]<-NA
pp[order(pp$EPICID, pp$ExamDate),]
nvisits <- nrow(pp)
for(i in 1:(nvisits-1)){
dSPBVC <- pp[i+1, "Siena_PBVC"] - pp[i, "Siena_PBVC"]
dDay <-as.numeric(as.Date(pp[i+1,]$ExamDate) - as.Date(pp[i,]$ExamDate))
dYear <- dDay/365
if (pp[i+1, "EPICID"] == pp[i, "EPICID"] ){
pp[i+1, "Siena_PBVCRate"] <- dSPBVC/dYear
pp[i+1, "PrevSiena_PBVC"] <- pp[i, "Siena_PBVC"]
pp[i+1, "PrevSiena_PBVCRate"] <- pp[i, "Siena_PBVCRate"]
pp[i+1, "PrevDiseaseDuration"] <- pp[i, "DiseaseDuration"]
pp[i+1, "PrevNew_T2_Lesions"]<-pp[i, "New_T2_Lesions"]
#pp[i+1, "PrevTreatmentM"] <- pp[i+1, "TreatmentMolecule"]
#p[i+1, "PrevTreatmentT"] <- pp[i+1, "TreatmentType"]
}
}
#Remove
pp <- pp[, ! colnames(pp) %in% c("Siena_PBVC", "DiseaseDuration", "New_T2_Lesions")]
#Siena_PBVC remove 0 or NA
pp <- pp[pp["PrevSiena_PBVC"]!=0, ]
pp <- pp[!is.na(pp["PrevSiena_PBVC"]), ]
# merge with psidd
ppnoNA<-merge(pp,psidd)
ppnoNA<-ppnoNA[complete.cases(ppnoNA),]
# Seperate those with EPICID, VisitID and ExamDate and those without
ppidd <- ppnoNA
diagnopp <-ppnoNA[, !(names(ppnoNA)%in%c("ExamDate","VisitID", "EPICID"))]
ppnames <- c("DiseaseDuration", "Siena_PBVC", "New_T2_Lesions")
pp <- fullTable32[c("VisitID", "ExamDate", "EPICID", ppnames)]
pp[, "Siena_PBVCRate"] <- NA
pp[, "PrevSiena_PBVC"] <- NA
pp[, "PrevSiena_PBVCRate"] <- NA
#pp[, "PrevTreatmentM"] <- NA
#pp[, "PrevTreatmentT"] <- NA
pp[, "PrevDiseaseDuration"] <- NA
pp[, "PrevNew_T2_Lesions"]<-NA
pp[order(pp$EPICID, pp$ExamDate),]
nvisits <- nrow(pp)
for(i in 1:(nvisits-1)){
dSPBVC <- pp[i+1, "Siena_PBVC"] - pp[i, "Siena_PBVC"]
dDay <-as.numeric(as.Date(pp[i+1,]$ExamDate) - as.Date(pp[i,]$ExamDate))
dYear <- dDay/365
if (pp[i+1, "EPICID"] == pp[i, "EPICID"] ){
pp[i+1, "Siena_PBVCRate"] <- dSPBVC/dYear
pp[i+1, "PrevSiena_PBVC"] <- pp[i, "Siena_PBVC"]
pp[i+1, "PrevSiena_PBVCRate"] <- pp[i, "Siena_PBVCRate"]
pp[i+1, "PrevDiseaseDuration"] <- pp[i, "DiseaseDuration"]
pp[i+1, "PrevNew_T2_Lesions"]<-pp[i, "New_T2_Lesions"]
#pp[i+1, "PrevTreatmentM"] <- pp[i+1, "TreatmentMolecule"]
#p[i+1, "PrevTreatmentT"] <- pp[i+1, "TreatmentType"]
}
}
pp <- pp[, ! colnames(pp) %in% c("Siena_PBVC", "DiseaseDuration", "New_T2_Lesions")]
#Siena_PBVC remove 0 or NA
pp <- pp[pp["PrevSiena_PBVC"]!=0, ]
pp <- pp[!is.na(pp["PrevSiena_PBVC"]), ]
# merge with psidd
ppnoNA<-merge(pp,psidd)
ppnoNA<-ppnoNA[complete.cases(ppnoNA),]
# Seperate those with EPICID, VisitID and ExamDate and those without
ppidd <- ppnoNA
diagnopp <-ppnoNA[, !(names(ppnoNA)%in%c("ExamDate","VisitID", "EPICID"))]
### Save #####
View(diagnopp)
View(diagnopp)
save(diagnopp, ppidd, file=ppPath)
h5write(data.frame(diagnopp), filePath,"diagnopp1")
file.copy(filePath, filePathPython, overwrite = TRUE)
h5write(data.frame(diagnopp), filePath,"diagnopp")
file.copy(filePath, filePathPython, overwrite = TRUE)
