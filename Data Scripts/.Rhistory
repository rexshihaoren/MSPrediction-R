# to Binarize a target column of a datafram
med <- median(df[[target]])
bin <- df
bin[[target]] <- ifelse(bin[[target]] <= med, 0,1)
return(bin)
}
modfam2_bin <-Binarize(modfam2, "EnjoyLife")
fam2_bin <- Binarize(fam2, "EnjoyLife")
DataProcessing <- function(df, target = ""){
# Processing a data frame to make everything (0, 1] except the target col
if (target == ""){
loc <- ncol(df)+1
} else{
loc <- grep(target, colnames(df))
}
processing <- df
processing <- apply(processing, 2, function(x) (x-min(x))/max(x)-min(x))
processing[,-loc] <- apply(processing[,-loc], c(1,2), function(x) if (x == 0) x+1e-12 else x)
as.data.frame(processing)
}
modfam2_processing <- DataProcessing(modfam2_bin, "EnjoyLife")
fam2_processing <- DataProcessing(fam2_bin, "EnjoyLife")
#save fam2, modfam2, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, and  merged in HDF5 format
h5createFile('data/predData.h5')
h5write(fam2, "data/predData.h5","fam2")
h5write(modfam2,"data/predData.h5","modfam2")
h5write(merged, "data/predData.h5", "merged")
h5write(fam2_bin, "data/predData.h5","fam2_bin")
h5write(modfam2_bin, "data/predData.h5","modfam2_bin")
h5write(modfam2_processing, "data/predData.h5","modfam2_processing")
h5write(fam2_processing, "data/predData.h5","fam2_processing")
gendist<-function(somedf, plotfunc, target, filename){
# Plotting distribution (histogram/density) given a dataframe and a target column, and a filename
# Args:
#    somdf: dataframe
#    plotfunc: geom_histogram or geom_density
#    target: target column
#    filename: filename given to the hitogram to generate
#
# Returns:
#   hitogram on target column
pfname = deparse(substitute(plotfunc))
filepath = paste("plots/",paste(filename, pfname, sep = "_"), ".pdf",sep="")
ggplot(somedf) + plotfunc(aes_string(x=target))
# ggsave(file="plots/modfam2.pdf")
ggsave(file=filepath)
}
generateCPDF<-function(somedf, plotfunc, target){
# Plot Conditional PDF
dfname = deparse(substitute(somedf))
pfname = deparse(substitute(plotfunc))
for (i in colnames(somedf)){
if (i != target){
if (pfname == "geom_density"){
ggplot(somedf) + plotfunc(aes_string(x=i, group = target, fill= target), alpha = 0.8)
} else {
ggplot(somedf) + plotfunc(aes_string(x=i, group = target, fill = target), position = "dodge")
}
fpath = paste("plots/",paste(dfname, "cpdf",i, sep = "_"), ".pdf", sep="")
ggsave(file = fpath)
}
}
}
fitCPDF<- function(df, xname, yname, f, plotfunc, method, start = NULL){
# Fitting Conditional pdf on top of histogram, and save that plot.
#
# Args:
#   df: dataset
#   xname: target col name
#   yname: condition col name
#   f: string that indicated the density function put on top of the histogram
#   plotfunc: original data plot, geom_hitogram or geom_density
#   method: the character string coding for the fitting method
#
# Returns:
#   Model conditional pdf
dfname = deparse(substitute(df))
pfname = deparse(substitute(plotfunc))
xcol <- df[[xname]]
ycol <- df[[yname]]
xrange <- range(xcol)
yrange <-  range(ycol)
xlen <- length(xrange)
ylen <- length(yrange)
sf <- list()
for (i in range(1,ylen)){
condData <- xcol[ycol == yrange[i]]
print(condData)
params <- c(fitdist(condData, f, method, start = start)$estimate)
# This step is IMPORTANT
dfunc = match.fun(paste('d', f, sep = ''))
if(pfname == "geom_histogram"){
sf[[i]] = stat_function(fun = dfunc, n = xlen, args = params, lty = "dashed")
}else{
sf[[i]] = stat_function(fun = dfunc, args = params, lty = "dashed")
}
}
if (pfname == "geom_histogram"){
ggplot(df) +
plotfunc(aes_string(y="..density.. * 0.1", x=xname, group = yname, fill=yname), binwidth=0.1, position="dodge", width = 2) +
sf
} else {
if (f == "beta"){
ggplot(df) +
plotfunc(aes_string(x=xname, group = yname, group = yname, fill=yname), alpha = .8) +
sf + scale_x_continuous(limits = c(0,1))
} else {
ggplot(df) +
plotfunc(aes_string(x=xname, group = yname, group = yname, fill=yname), alpha = .8) +
sf
}
}
# Save plots
fpath = paste("plots/",paste(dfname, "fitcpdf", xname,"on",yname, f, sep = "_"), ".pdf", sep="")
ggsave(file = fpath)
}
# # List of density functions
# densfunlist <- c("norm", "exp", "gamma", "nbinom", "geom", "beta", "logis", "nbinorm")
# # TODO??
# PickBestFit <- function(x, method){
#   # Fit the best density functions out of densfunlist
#   # Args:
#   #   x: a numeric vector
#   #   method: the character string coding for the fitting method
#   # Returns:
#   #   fitdistr obj with the best performance based on estimated standard error mean
#   errlist <- list()
#   for (f in densfunlist){
#     obj <- fitdist(x, f)
#     stderror <- obj$sd[1]
#     errlist[stderror] <- obj
#   }
# }
###Examples
gendist(modfam2, geom_histogram, "EnjoyLife", "modfam2")
gendist(fam2, geom_histogram, "EnjoyLife", "fam2")
# Plot PDF after binarize
gendist(modfam2_bin, geom_histogram,"EnjoyLife", "modfam2_bin")
gendist(fam2_bin, geom_histogram,"EnjoyLife", "fam2_bin")
gendist(fullTable3, geom_histogram, "ActualEDSS", "fullTable3")
gendist(fullTable3, geom_density, "ActualEDSS", "fullTable3")
generateCPDF(modfam2_bin,geom_density, "EnjoyLife")
generateCPDF(fam2_bin, geom_histogram, "EnjoyLife")
# Plot Fitted Histogram for fam2 with 'norm' normal distribution
for (cname in colnames(fam2_bin)){
if (cname != "EnjoyLife"){
fitCPDF(fam2_bin, cname, "EnjoyLife", "norm", geom_histogram, "mle")
}
}
# Plot Fitted density for modfam2 with 'norm' normal distribution
for (cname in colnames(modfam2_bin)){
if (cname != "EnjoyLife"){
print(cname)
fitCPDF(modfam2_bin, cname, "EnjoyLife", "gamma", geom_density, "mme")
}
}
# Plot Fitted density for modfam2 with 'norm' normal distribution
for (cname in colnames(modfam2_processing)){
if (cname != "EnjoyLife"){
print(cname)
fitCPDF(modfam2_processing, cname, "EnjoyLife", "beta", geom_density, "mme")
}
}
for (cname in colnames(fam2_bin)){
if (cname != "EnjoyLife"){
print(cname)
fitCPDF(fam2_bin, cname, "EnjoyLife", "pois", geom_histogram, "mme")
}
}
for (cname in colnames(fam2_bin)){
if (cname != "EnjoyLife"){
print(cname)
fitCPDF(fam2_bin, cname, "EnjoyLife", "nbinom", geom_histogram, "mme")
}
}
ggplot(df) + geom_histogram(aes_string(y="..density.. * 0.1",x=xname, group = yname, group = yname, fill=yname), binwidth = 0.1, position="dodge") + sf + sf1
sf
sf1
sf1 = stat_function(fun = dfunc, n = 5, args = params1, lty = "dashed")
ggplot(df) + geom_histogram(aes_string(y="..density.. * 0.1",x=xname, group = yname, group = yname, fill=yname), binwidth = 0.1, position="dodge") + sf + sf1
xlen <- length(xrange)
ylen <- length(yrange)
xrange <- range(xcol)
xrange
xcol
unique(xcol)
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
# get modified-fam2
require(ggplot2)
require(rhdf5)
require(MASS)
require(fitdistrplus)
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
# Merge fam2, modfam2, fullTable3
#First change fam2 colname "VisitId" to "VisitID"
colnames(fam2)[1] = "VisitID"
#merged = merge(fam2, modfam2, by = "VisitID", all.y = TRUE)
merged = merge(fam2, modfam2)
merged <- merge(merged, fullTable3)
# only 5 cols, group1~3, relative-pain, enjoylife
modfam2<-modfam2[,9:13]
# get rid visitID
fam2<-fam2[,-1]
Binarize <- function(df, target){
# to Binarize a target column of a datafram
med <- median(df[[target]])
bin <- df
bin[[target]] <- ifelse(bin[[target]] <= med, 0,1)
return(bin)
}
modfam2_bin <-Binarize(modfam2, "EnjoyLife")
fam2_bin <- Binarize(fam2, "EnjoyLife")
DataProcessing <- function(df, target = ""){
# Processing a data frame to make everything (0, 1] except the target col
if (target == ""){
loc <- ncol(df)+1
} else{
loc <- grep(target, colnames(df))
}
processing <- df
processing <- apply(processing, 2, function(x) (x-min(x))/max(x)-min(x))
processing[,-loc] <- apply(processing[,-loc], c(1,2), function(x) if (x == 0) x+1e-12 else x)
as.data.frame(processing)
}
modfam2_processing <- DataProcessing(modfam2_bin, "EnjoyLife")
fam2_processing <- DataProcessing(fam2_bin, "EnjoyLife")
#save fam2, modfam2, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, and  merged in HDF5 format
h5createFile('data/predData.h5')
h5write(fam2, "data/predData.h5","fam2")
h5write(modfam2,"data/predData.h5","modfam2")
h5write(merged, "data/predData.h5", "merged")
h5write(fam2_bin, "data/predData.h5","fam2_bin")
h5write(modfam2_bin, "data/predData.h5","modfam2_bin")
h5write(modfam2_processing, "data/predData.h5","modfam2_processing")
h5write(fam2_processing, "data/predData.h5","fam2_processing")
gendist<-function(somedf, plotfunc, target, filename){
# Plotting distribution (histogram/density) given a dataframe and a target column, and a filename
# Args:
#    somdf: dataframe
#    plotfunc: geom_histogram or geom_density
#    target: target column
#    filename: filename given to the hitogram to generate
#
# Returns:
#   hitogram on target column
pfname = deparse(substitute(plotfunc))
filepath = paste("plots/",paste(filename, pfname, sep = "_"), ".pdf",sep="")
ggplot(somedf) + plotfunc(aes_string(x=target))
# ggsave(file="plots/modfam2.pdf")
ggsave(file=filepath)
}
generateCPDF<-function(somedf, plotfunc, target){
# Plot Conditional PDF
dfname = deparse(substitute(somedf))
pfname = deparse(substitute(plotfunc))
for (i in colnames(somedf)){
if (i != target){
if (pfname == "geom_density"){
ggplot(somedf) + plotfunc(aes_string(x=i, group = target, fill= target), alpha = 0.8)
} else {
ggplot(somedf) + plotfunc(aes_string(x=i, group = target, fill = target), position = "dodge")
}
fpath = paste("plots/",paste(dfname, "cpdf",i, sep = "_"), ".pdf", sep="")
ggsave(file = fpath)
}
}
}
fitCPDF<- function(df, xname, yname, f, plotfunc, method, start = NULL){
# Fitting Conditional pdf on top of histogram, and save that plot.
#
# Args:
#   df: dataset
#   xname: target col name
#   yname: condition col name
#   f: string that indicated the density function put on top of the histogram
#   plotfunc: original data plot, geom_hitogram or geom_density
#   method: the character string coding for the fitting method
#
# Returns:
#   Model conditional pdf
dfname = deparse(substitute(df))
pfname = deparse(substitute(plotfunc))
xcol <- df[[xname]]
ycol <- df[[yname]]
xrange <- unique(xcol)
yrange <- unique(ycol)
xlen <- length(xrange)
ylen <- length(yrange)
sf <- list()
for (i in range(1,ylen)){
condData <- xcol[ycol == yrange[i]]
print(condData)
params <- c(fitdist(condData, f, method, start = start)$estimate)
# This step is IMPORTANT
dfunc = match.fun(paste('d', f, sep = ''))
if(pfname == "geom_histogram"){
sf[[i]] = stat_function(fun = dfunc, n = xlen, args = params, lty = "dashed")
}else{
sf[[i]] = stat_function(fun = dfunc, args = params, lty = "dashed")
}
}
if (pfname == "geom_histogram"){
ggplot(df) +
plotfunc(aes_string(y="..density.. * 0.1", x=xname, group = yname, fill=yname), binwidth=0.1, position="dodge", width = 2) +
sf
} else {
if (f == "beta"){
ggplot(df) +
plotfunc(aes_string(x=xname, group = yname, group = yname, fill=yname), alpha = .8) +
sf + scale_x_continuous(limits = c(0,1))
} else {
ggplot(df) +
plotfunc(aes_string(x=xname, group = yname, group = yname, fill=yname), alpha = .8) +
sf
}
}
# Save plots
fpath = paste("plots/",paste(dfname, "fitcpdf", xname,"on",yname, f, sep = "_"), ".pdf", sep="")
ggsave(file = fpath)
}
# # List of density functions
# densfunlist <- c("norm", "exp", "gamma", "nbinom", "geom", "beta", "logis", "nbinorm")
# # TODO??
# PickBestFit <- function(x, method){
#   # Fit the best density functions out of densfunlist
#   # Args:
#   #   x: a numeric vector
#   #   method: the character string coding for the fitting method
#   # Returns:
#   #   fitdistr obj with the best performance based on estimated standard error mean
#   errlist <- list()
#   for (f in densfunlist){
#     obj <- fitdist(x, f)
#     stderror <- obj$sd[1]
#     errlist[stderror] <- obj
#   }
# }
###Examples
gendist(modfam2, geom_histogram, "EnjoyLife", "modfam2")
gendist(fam2, geom_histogram, "EnjoyLife", "fam2")
# Plot PDF after binarize
gendist(modfam2_bin, geom_histogram,"EnjoyLife", "modfam2_bin")
gendist(fam2_bin, geom_histogram,"EnjoyLife", "fam2_bin")
gendist(fullTable3, geom_histogram, "ActualEDSS", "fullTable3")
gendist(fullTable3, geom_density, "ActualEDSS", "fullTable3")
generateCPDF(modfam2_bin,geom_density, "EnjoyLife")
generateCPDF(fam2_bin, geom_histogram, "EnjoyLife")
# Plot Fitted Histogram for fam2 with 'norm' normal distribution
for (cname in colnames(fam2_bin)){
if (cname != "EnjoyLife"){
fitCPDF(fam2_bin, cname, "EnjoyLife", "norm", geom_histogram, "mle")
}
}
# Plot Fitted density for modfam2 with 'norm' normal distribution
for (cname in colnames(modfam2_bin)){
if (cname != "EnjoyLife"){
print(cname)
fitCPDF(modfam2_bin, cname, "EnjoyLife", "gamma", geom_density, "mme")
}
}
# Plot Fitted density for modfam2 with 'norm' normal distribution
for (cname in colnames(modfam2_processing)){
if (cname != "EnjoyLife"){
print(cname)
fitCPDF(modfam2_processing, cname, "EnjoyLife", "beta", geom_density, "mme")
}
}
for (cname in colnames(fam2_bin)){
if (cname != "EnjoyLife"){
print(cname)
fitCPDF(fam2_bin, cname, "EnjoyLife", "pois", geom_histogram, "mme")
}
}
for (cname in colnames(fam2_bin)){
if (cname != "EnjoyLife"){
print(cname)
fitCPDF(fam2_bin, cname, "EnjoyLife", "nbinom", geom_histogram, "mme")
}
}
params <- c(fitdist(condData, f, method, start = start)$estimate)
f <- "nbinom"
sf = stat_function(fun = dfunc, n = 5, args = params, aes(colour="EnjoyLife"))
ggplot(df) + geom_histogram(aes_string(y="..density.. * 0.1",x=xname, group = yname, group = yname, fill=yname), binwidth = 0.1, position="dodge") + sf + sf1
i
i <-2
condData <- xcol[ycol == yrange[
i]
]
params1 <- c(fitdist(condData, f, method, start = start)$estimate)
sf1 = stat_function(fun = dfunc, n = 5, args = params1, lty = "dashed")
ggplot(df) + geom_histogram(aes_string(y="..density.. * 0.1",x=xname, group = yname, group = yname, fill=yname), binwidth = 0.1, position="dodge") + sf + sf1
param1
param1 <- c(fitdist(condData, f, method, start = start)$estimate)
ggplot(df) + geom_histogram(aes_string(y="..density.. * 0.1",x=xname, group = yname, group = yname, fill=yname), binwidth = 0.1, position="dodge") + sf + sf1
sf1 = stat_function(fun = dfunc, n = 5, args = param1, lty = "dashed")
ggplot(df) + geom_histogram(aes_string(y="..density.. * 0.1",x=xname, group = yname, group = yname, fill=yname), binwidth = 0.1, position="dodge") + sf + sf1
ggplot(df) + geom_histogram(aes_string(y="..density.. * 0.1",x=xname, group = yname, group = yname, fill=yname), binwidth = 0.1, position="dodge") + sf
dfunc = match.fun(paste('d', f, sep = ''))
sf1 = stat_function(fun = dfunc, n = 5, args = param1, lty = "dashed")
ggplot(df) + geom_histogram(aes_string(y="..density.. * 0.1",x=xname, group = yname, group = yname, fill=yname), binwidth = 0.1, position="dodge") + sf1
sf = stat_function(fun = dfunc, n = 5, args = params, aes(colour="EnjoyLife"))
ggplot(df) + geom_histogram(aes_string(y="..density.. * 0.1",x=xname, group = yname, group = yname, fill=yname), binwidth = 0.1, position="dodge") + sf + sf1
sf = stat_function(fun = dfunc, n = 5, args = params, lty = "dashed"
)
ggplot(df) + geom_histogram(aes_string(y="..density.. * 0.1",x=xname, group = yname, group = yname, fill=yname), binwidth = 0.1, position="dodge") + sf + sf1
ggplot(df) + geom_histogram(aes_string(y="..density.. * 0.1",x=xname, group = yname, group = yname, fill=yname), binwidth = 0.1, position="dodge") + sf
param1
param
params
params <- c(fitdist(condData, f, method, start = start)$estimate)
i
i <-1
condData <- xcol[ycol == yrange[i]]
param <- c(fitdist(condData, f, method, start = start)$estimate)
param
method
method = "mle"
param <- c(fitdist(condData, f, method, start = start)$estimate)
method = "mme"
param <- c(fitdist(condData, f, method, start = start)$estimate)
sf = stat_function(fun = dfunc, n = 5, args = param, lty = "dashed")
sf
ggplot(df) + geom_histogram(aes_string(y="..density.. * 0.1",x=xname, group = yname, group = yname, fill=yname), binwidth = 0.1, position="dodge") + sf
fullTable3_ordered <- fullTable3[order(fullTable3$value, fullTable3$name),]
fullTable3_ordered <- fullTable3[order(fullTable3$value, fullTable3$name)]
View(fullTable3)
fullTable3_ordered <- fullTable3[order(fullTable3$EPICID, fullTable3$ExamDate)]
fullTable3$EPICID
fullTable3$ExamDate
fullTable3_ordered <- fullTable3[order(fullTable3$EPICID, fullTable3$ExamDate),]
View(fullTable3_ordered)
fullTable3_ordered[,fullTable3$EPICID == 1]
fullTable3_ordered[,_ordered$EPICID == 1]
fullTable3_ordered[,fullTable3_ordered$EPICID == 1]
fullTalbe3.1<-fullTable3_ordered[,fullTable3_ordered$EPICID == 1]
View(fullTalbe3.1)
fullTalbe3.1<-fullTable3_ordered[fullTable3_ordered$EPICID == 1]
View(fullTalbe3.1)
fullTalbe3.1<-fullTable3_ordered[fullTable3_ordered$EPICID == 1]
View(fullTalbe3.1)
View(fullTalbe3.1)
fullTable3[1]
View(fullTable3)
fullTable3[2]
fullTable3[4]
fullTable3[4,]
fullTable3[,4]$ExamDate
fullTable3[4,]$ExamDate
fullTable3[4,]
fullTable3[4,3]
fullTable3[4,"ExamDate"]
fullTable3[4,]$ExamDate
fullTable3[4,]$ExamDate - fullTable3[3,]$ExamDate
fullTable3[4,]$ExamDate
as.Day(fullTable3[4,]$ExamDate)
as.day(fullTable3[4,]$ExamDate)
as.Date(fullTable3[4,]$ExamDate)
as.Date(fullTable3[4,]$ExamDate) - as.Date(fullTable3[5,]$ExamDate)
as.yearday(as.Date(fullTable3[4,]$ExamDate) - as.Date(fullTable3[5,]$ExamDate))
as.Date(fullTable3[4,]$ExamDate) - as.Date(fullTable3[5,]$ExamDate)
5/ as.Date(fullTable3[4,]$ExamDate) - as.Date(fullTable3[5,]$ExamDate)
as.numeric(as.Date(fullTable3[4,]$ExamDate) - as.Date(fullTable3[5,]$ExamDate))
fullTable3_ordered[, "EDSSRate"] <- NA
nvisits < - nrow(fullTable3_ordered)
for(i in 1:(nvisits-1)){
dEDSS <- fullTable3_ordered[i+1, "EDSS"] - fullTable3_ordered[i, "EDSS"]
dDay <- as.numerica(as.Date(fullTable3_ordered[i+1,]$ExamDate) - as.Date(fullTable3_ordered[i,]$ExamDate))
if (dDay > 0){
fullTable3_ordered[i+1, "EDSSRate"] <- dEDSS/dDay
}
}
nvisits < - nrow(fullTable3_ordered)
nvisits <- nrow(fullTable3_ordered)
for(i in 1:(nvisits-1)){
dEDSS <- fullTable3_ordered[i+1, "EDSS"] - fullTable3_ordered[i, "EDSS"]
dDay <- as.numerica(as.Date(fullTable3_ordered[i+1,]$ExamDate) - as.Date(fullTable3_ordered[i,]$ExamDate))
if (dDay > 0){
fullTable3_ordered[i+1, "EDSSRate"] <- dEDSS/dDay
}
}
nvisits <- nrow(fullTable3_ordered)
for(i in 1:(nvisits-1)){
dEDSS <- fullTable3_ordered[i+1, "EDSS"] - fullTable3_ordered[i, "EDSS"]
dDay <- as.numeric(as.Date(fullTable3_ordered[i+1,]$ExamDate) - as.Date(fullTable3_ordered[i,]$ExamDate))
if (dDay > 0){
fullTable3_ordered[i+1, "EDSSRate"] <- dEDSS/dDay
}
}
View(fullTable3_ordered)
View(fullTable3_ordered)
i <- 1
dEDSS <- fullTable3_ordered[i+1, "EDSS"] - fullTable3_ordered[i, "EDSS"]
dDay <- as.numeric(as.Date(fullTable3_ordered[i+1,]$ExamDate) - as.Date(fullTable3_ordered[i,]$ExamDate))
if (dDay > 0){
fullTable3_ordered[i+1, "EDSSRate"] <- dEDSS/dDay
}
dDay
dEDSS
0/372
nvisits <- nrow(fullTable3_ordered)
for(i in 1:(nvisits-1)){
dEDSS <- fullTable3_ordered[i+1, "ActualEDSS"] - fullTable3_ordered[i, "ActualEDSS"]
dDay <- as.numeric(as.Date(fullTable3_ordered[i+1,]$ExamDate) - as.Date(fullTable3_ordered[i,]$ExamDate))
if (dDay > 0){
fullTable3_ordered[i+1, "EDSSRate"] <- dEDSS/dDay
}
}
View(fullTable3_ordered)
View(fullTable3_ordered)
h5write(fullTable3_ordered, "data/predData.h5","fullTable3_ordered")
