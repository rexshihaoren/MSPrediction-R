# Core&Static&MRI_Imp
# Core&Static&MRI_Cut
# Core&Static&Examination-VDL
# Core&Static&Examination_Imp
# Core&Static&Examination_Cut
# Core&Static&Examination&MRI-T2L-VDL
# Core&Static&Examination&MRI-T2L_Cut
# Core&Static&Examination&MRI-T2L_Imp
# Core&Static&Examination&MRI-VDL_Cut
# Core&Static&Examination&MRI-VDL_Imp
# Core&Static&Examination&MRI_Imp
#
# Set up
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("test.r")
# Create h5 path
# f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
# if (! f){
#   file.remove(filePath)
#   h5createFile(filePath)
# }
load(testPath)
load(gatherPath)
####combine<-function(dfs, imp= F, cut = F, rmcols = NULL, tgt)
#EDSS <- combine(dfs = list(target, core[,c("VisitID","PrevEDSS")]), imp = F, cut = F, rmcols = NULL, tgt = "ModEDSS")
bit1 <- 0
# If bit1 == 1, EDSS&EDSSRate_Imp's performance > EDSS$EDSSRate
if (bit1 == 1){
core <- coreNA
}
CorewFam <- combine(dfs = list(target, core, fam2))
CorewmodFam <- combine(dfs = list(target, core, modfam2))
CorewStaticwoOW <- combine(dfs = list(target, core, static), rmcols = c("Overweight"))
CorewStatic_Imp <- combine(dfs = list(target, core, static), imp = T)
CorewStatic_Cut <- combine(dfs = list(target, core, static), cut = T)
h5write(CorewStatic_Imp, filePath,"CorewStatic_Imp")
h5write(CorewStatic_Cut, filePath,"CorewStatic_Cut")
# If bit2 == 1, CorewStatic_Imp's performance > CorewStatic_Cut
bit2 <- 0
if (bit2 == 1){
staic <- static[complete.cases(static),]
} else {
colnames <- names(static)[names(static) != "VisitID"]
static[, colnames] <- CorewStatic_Imp[,colnames ]
}
CorewStaticwFam <- combine(dfs = list(target, core, static, fam2))
CorewStaticwTreatment <- combine(dfs = list(target, core, static, treatment))
# Genetics use imp because too many NA's for genetics
CorewStaticwGenetics_Imp <- combine(dfs = list(target, core, static, genetics), imp = T)
CorewStaticwMRIwoT2L <- combine(dfs = list(target, core, static, MRI), rmcols = c("PrevNew_T2_Lesions"))
CorewStaticwMRI_Imp <- combine(dfs = list(target, core, static, MRI), imp = T)
CorewStaticwMRI_Cut <- combine(dfs = list(target, core, static, MRI), cut = T)
CorewStaticwExamwoVDL <- combine(dfs = list(target, core, static, exam), rmcols = c("PrevVDL"))
CorewStaticwExam_Imp <- combine(dfs = list(target, core, static, exam), imp = T)
CorewStaticwExam_Cut <- combine(dfs = list(target, core, static, exam), cut = T)
CorewStaticwExamwMRIwoT2LwoVDL <- combine(dfs = list(target, core, static, exam, MRI), rmcols = c("PrevNew_T2_Lesions", "PrevVDL"))
CorewStaticwExamwMRIwoT2L_Cut <- combine(dfs = list(target, core, static, exam, MRI), cut = T, rmcols = c("PrevNew_T2_Lesions"))
CorewStaticwExamwMRIwoT2L_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevNew_T2_Lesions"))
CorewStaticwExamwMRIwoVDL_Cut <- combine(dfs = list(target, core, static, exam, MRI), cut = T, rmcols = c("PrevVDL"))
CorewStaticwExamwMRIwoVDL_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevVDL"))
CorewStaticwExamwMRI_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T)
#h5write(Core_Imp, filePath, "Core_Imp")
h5write(CorewFam, filePath,"CorewFam")
h5write(CorewmodFam, filePath,"CorewmodFam")
h5write(CorewStatic, filePath,"CorewStatic")
h5write(CorewStaticwFam, filePath,"CorewStaticwFam")
h5write(CorewStaticwTreatment, filePath,"CorewStaticwTreatment")
h5write(CorewStaticwGenetics_Imp, filePath,"CorewStaticwGenetics_Imp")
h5write(CorewStaticwMRIwoT2L, filePath,"CorewStaticwMRIwoT2L")
h5write(CorewStaticwMRI_Imp, filePath,"CorewStaticwMRI_Imp")
h5write(CorewStaticwMRI_Cut, filePath,"CorewStaticwMRI_Cut")
h5write(CorewStaticwExamwoVDL, filePath,"CorewStaticwExamwoVDL")
h5write(CorewStaticwExam_Imp, filePath,"CorewStaticwExam_Imp")
h5write(CorewStaticwExam_Cut, filePath,"CorewStaticwExam_Cut")
h5write(CorewStaticwExamwMRIwoT2LwoVDL, filePath,"CorewStaticwExamwMRIwoT2LwoVDL")
h5write(CorewStaticwExamwMRIwoT2L_Cut, filePath,"CorewStaticwExamwMRIwoT2L_Cut")
h5write(CorewStaticwExamwMRIwoT2L_Imp, filePath,"CorewStaticwExamwMRIwoT2L_Imp")
h5write(CorewStaticwExamwMRIwoVDL_Cut, filePath,"CorewStaticwExamwMRIwoVDL_Cut")
h5write(CorewStaticwExamwMRIwoVDL_Imp , filePath,"CorewStaticwExamwMRIwoVDL_Imp ")
h5write(CorewStaticwExamwMRI_Imp, filePath,"CorewStaticwExamwMRI_Imp")
file.copy(filePath, filePathPython, overwrite = TRUE)
View(CorewStaticwoOW)
sum(is.na(CorewStaticwoOW))
#### This program generate everything from gather.r into diserable dataframes ######
#
# DATASETS:
# EDSS
# EDSS&EDSSRate (PrevXXRate = 0)
# EDSS&EDSSRate_Imp (PrevXXRate = NA)
# Core-Rate
# Core
# Core_Imp
# Pick one for core after testing.
# (For the following just use PrevXXRate = 0)
# Core&fam
# Core&modfam
# Core&Static-Overweight
# Core&Static_Imp
# Core&Static_Cut
# Core&Static&fam
# Core&Static&Treatments
# Core$Static&Genetics
# Core&Static&MRI-T2L
# Core&Static&MRI_Imp
# Core&Static&MRI_Cut
# Core&Static&Examination-VDL
# Core&Static&Examination_Imp
# Core&Static&Examination_Cut
# Core&Static&Examination&MRI-T2L-VDL
# Core&Static&Examination&MRI-T2L_Cut
# Core&Static&Examination&MRI-T2L_Imp
# Core&Static&Examination&MRI-VDL_Cut
# Core&Static&Examination&MRI-VDL_Imp
# Core&Static&Examination&MRI_Imp
#
# Set up
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("test.r")
# Create h5 path
# f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
# if (! f){
#   file.remove(filePath)
#   h5createFile(filePath)
# }
load(testPath)
load(gatherPath)
####combine<-function(dfs, imp= F, cut = F, rmcols = NULL, tgt)
#EDSS <- combine(dfs = list(target, core[,c("VisitID","PrevEDSS")]), imp = F, cut = F, rmcols = NULL, tgt = "ModEDSS")
bit1 <- 0
# If bit1 == 1, EDSS&EDSSRate_Imp's performance > EDSS$EDSSRate
if (bit1 == 1){
core <- coreNA
}
CorewFam <- combine(dfs = list(target, core, fam2))
CorewmodFam <- combine(dfs = list(target, core, modfam2))
CorewStaticwoOW <- combine(dfs = list(target, core, static), rmcols = c("Overweight"))
CorewStatic_Imp <- combine(dfs = list(target, core, static), imp = T)
CorewStatic_Cut <- combine(dfs = list(target, core, static), cut = T)
h5write(CorewStaticwoOW, filePath,"CorewStaticwoOW")
h5write(CorewStatic_Imp, filePath,"CorewStatic_Imp")
h5write(CorewStatic_Cut, filePath,"CorewStatic_Cut")
# If bit2 == 1, CorewStatic_Imp's performance > CorewStatic_Cut
bit2 <- 0
if (bit2 == 1){
staic <- static[complete.cases(static),]
} else {
colnames <- names(static)[names(static) != "VisitID"]
static[, colnames] <- CorewStatic_Imp[,colnames ]
}
CorewStaticwFam <- combine(dfs = list(target, core, static, fam2))
CorewStaticwTreatment <- combine(dfs = list(target, core, static, treatment))
# Genetics use imp because too many NA's for genetics
CorewStaticwGenetics_Imp <- combine(dfs = list(target, core, static, genetics), imp = T)
CorewStaticwMRIwoT2L <- combine(dfs = list(target, core, static, MRI), rmcols = c("PrevNew_T2_Lesions"))
CorewStaticwMRI_Imp <- combine(dfs = list(target, core, static, MRI), imp = T)
CorewStaticwMRI_Cut <- combine(dfs = list(target, core, static, MRI), cut = T)
CorewStaticwExamwoVDL <- combine(dfs = list(target, core, static, exam), rmcols = c("PrevVDL"))
CorewStaticwExam_Imp <- combine(dfs = list(target, core, static, exam), imp = T)
CorewStaticwExam_Cut <- combine(dfs = list(target, core, static, exam), cut = T)
CorewStaticwExamwMRIwoT2LwoVDL <- combine(dfs = list(target, core, static, exam, MRI), rmcols = c("PrevNew_T2_Lesions", "PrevVDL"))
CorewStaticwExamwMRIwoT2L_Cut <- combine(dfs = list(target, core, static, exam, MRI), cut = T, rmcols = c("PrevNew_T2_Lesions"))
CorewStaticwExamwMRIwoT2L_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevNew_T2_Lesions"))
CorewStaticwExamwMRIwoVDL_Cut <- combine(dfs = list(target, core, static, exam, MRI), cut = T, rmcols = c("PrevVDL"))
CorewStaticwExamwMRIwoVDL_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevVDL"))
CorewStaticwExamwMRI_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T)
#h5write(Core_Imp, filePath, "Core_Imp")
h5write(CorewFam, filePath,"CorewFam")
h5write(CorewmodFam, filePath,"CorewmodFam")
h5write(CorewStatic, filePath,"CorewStatic")
h5write(CorewStaticwFam, filePath,"CorewStaticwFam")
h5write(CorewStaticwTreatment, filePath,"CorewStaticwTreatment")
h5write(CorewStaticwGenetics_Imp, filePath,"CorewStaticwGenetics_Imp")
h5write(CorewStaticwMRIwoT2L, filePath,"CorewStaticwMRIwoT2L")
h5write(CorewStaticwMRI_Imp, filePath,"CorewStaticwMRI_Imp")
h5write(CorewStaticwMRI_Cut, filePath,"CorewStaticwMRI_Cut")
h5write(CorewStaticwExamwoVDL, filePath,"CorewStaticwExamwoVDL")
h5write(CorewStaticwExam_Imp, filePath,"CorewStaticwExam_Imp")
h5write(CorewStaticwExam_Cut, filePath,"CorewStaticwExam_Cut")
h5write(CorewStaticwExamwMRIwoT2LwoVDL, filePath,"CorewStaticwExamwMRIwoT2LwoVDL")
h5write(CorewStaticwExamwMRIwoT2L_Cut, filePath,"CorewStaticwExamwMRIwoT2L_Cut")
h5write(CorewStaticwExamwMRIwoT2L_Imp, filePath,"CorewStaticwExamwMRIwoT2L_Imp")
h5write(CorewStaticwExamwMRIwoVDL_Cut, filePath,"CorewStaticwExamwMRIwoVDL_Cut")
h5write(CorewStaticwExamwMRIwoVDL_Imp , filePath,"CorewStaticwExamwMRIwoVDL_Imp ")
h5write(CorewStaticwExamwMRI_Imp, filePath,"CorewStaticwExamwMRI_Imp")
file.copy(filePath, filePathPython, overwrite = TRUE)
temp
sapply(names(temp), function(x) sum(is.na(temp[, x]))/dim(temp[1]))
test <- sapply(names(temp), function(x) sum(is.na(temp[, x]))/dim(temp[1]))
dim(test)
test[1]
test[2]
test[1,]
str(test)
View(temp)
View(temp[, names(temp)[grep("PBVC",names(temp))]])
View(temp[, c("VisitID",names(temp)[grep("PBVC",names(temp))])])
temp <- temp[order(temp$EPICID, temp$ExamDate),]
View(temp[, c("VisitID",names(temp)[grep("PBVC",names(temp))])])
load("step0/result.RData")
fullTable32 <- fullTable32[!duplicated(fullTable32$VisitID),]
# fetch original fam2 and fullTable3
load("step1/result.RData")
# fetch modfam2
modfam2<-read.csv("step3/data_all.csv")
# fetch DMT
DMT<-read.table("tableDMT.csv")
###### fam related ###################
# create RData path
# file.create(famPath)
#First change fam2 colname "VisitId" to "VisitID"
fam2 <- rename(fam2, c("VisitId"="VisitID"))
# For modfam2, get rid of column "X", and change "RelativePain" column to "modRelativePain" to avoid confusion when merging modfam2 and fam2
modfam2["X"] <- NULL
modfam2 <- rename(modfam2, c("RelativePain" = "modRelativePain"))
# For modfam2, only preserve 5 cols for analytic purpose: group1~3, relative-pain, enjoylife
modfam2<-modfam2[c("VisitID","group1", "group2", "group3", "modRelativePain","EnjoyLife")]
##### Core Related Prep#############
#
# Core:
# "PrevEDSS"
# "PrevEDSSRate"
# "PrevMSSS"
# "PrevMSSSRate"
#
# EDSS Related from fullTable3, MSSS Rated from fullTable32
#
# file.create(corePath)
coreNames <- c("PrevEDSS", "PrevEDSSRate", "PrevMSSS", "PrevMSSSRate")
# The senario where PrevEDSSRate is NA
coreNANames <- c("PrevEDSS", "PrevEDSSRateNA", "PrevMSSS", "PrevMSSSRate")
core <- merge (fullTable3[c("VisitID", "ActualEDSS")], fullTable32[c("VisitID", "MSSS")])
core[, c(coreNames)] <- NA
#### MRI Related Prep
#
# MRI:
# "PrevSiena_PBVC"
# "PrevSiena_PBVCRate"
# "PrevGMV"
# "PrevGMVRate"
# "PrevNew_T2_Lesions"
#
# From fullTable32
#
# file.create(MRIPath)
MRINames<- c("PrevSiena_PBVC", "PrevSiena_PBVCRate", "PrevGMV", "PrevGMVRate", "PrevNew_T2_Lesions")
MRI <- fullTable32[c("VisitID", "Siena_PBVC", "GM_Volume", "New_T2_Lesions")]
MRI[, MRINames] <- NA
#### Examination Related Prep
# Examination:
# "AgeAtExam"
# "PrevOpticNeuritis"
# "PrevVDL"
# "PrevDiseaseDuration"
#
# From fullTable32
# file.create(examPath)
examNames <- c("AgeAtExam","PrevOpticNeuritis", "PrevVDL", "PrevDiseaseDuration")
exam <- fullTable32[c("VisitID", "AgeAtExam", "OpticNeuritis", "VitaminD_Level", "DiseaseDuration")]
exam[, c("PrevOpticNeuritis", "PrevVDL", "PrevDiseaseDuration")] <- NA
### Treatment Related Prep
# Treatment:
# "PrevRecTreatment"
# "PrevTreatmentMCount"
# "PrevTreatmentTCount"
#
# From DMT
# DMT described all the treatment
# file.create(treatmentPath)
treatmentNames <- c("PrevRecTreatment", "PrevTreatmentMCount", "PrevTreatmentTCount")
treatment <- DMT[c("VisitID", "TreatmentMolecule", "TreatmentType")]
##### Target ########
#Add target column 'ModEDSS' (modified EDSS), denoting whether EDSS increased
#if ignore abs dEDSSS < 0.5, or decrease = > Class 0; Otherwise => Class 1
# file.create(targetPath)
targetNames <- c("ModEDSS")
target <- fullTable3[,c("VisitID","EPICID", "ExamDate", "ActualEDSS")]
target <- target[order(target$EPICID, target$ExamDate),]
target[, "ModEDSS"] <- NA
nvisits <- nrow(target)
for(i in 1:(nvisits-1)){
dEDSS <- target[i+1, "ActualEDSS"] - target[i, "ActualEDSS"]
if (target[i+1, "EPICID"] == target[i, "EPICID"] ){
if (abs(dEDSS) <= .5){
target[i+1, "ModEDSS"] <- 0
} else {
if (dEDSS< 0){
target[i+1, "ModEDSS"] <- 0
} else {
target[i+1, "ModEDSS"] <- 1
}
}
}
}
#### Merge and Iterate through the Visits and generate PrevXX and PrevXXRate #####
# "PrevEDSS", "PrevEDSSRate", "PrevMSSS", "PrevMSSSRate"
# "PrevSiena_PBVC", "PrevSiena_PBVCRate", "PrevGMV", "PrevGMVRate", "PrevNew_T2_Lesions"
# "PrevOpticNeuritis", "PrevVDL", "PrevDiseaseDuration"
# "PrevRecTreatment", "PrevTreatmentM", "PrevTreatmentT"
# MAKE SURE the VisitID in target always presents
temp <- merge(target, core)
temp <- merge(temp, exam)
temp <- merge(temp, MRI)
# Order temp for calculating PrevXXRate
temp <- temp[order(temp$EPICID, temp$ExamDate),]
# unique VisitID's in DMT
DMTVisitIDs <- unique(treatment[["VisitID"]])
nvisits <- nrow(temp)
EPICIDls <- unique(temp$EPICID)
# Initialize "PrevRecTreatment", "PrevTreatmentMCount", "PrevTreatmentTCount" in temp
temp[, c("PrevRecTreatment", "PrevTreatmentMCount", "PrevTreatmentTCount")] <- NA
# colnames that include "PrevXXRate"
PrevRateNames <- names(temp)[grep("Rate",names(temp))]
# Temporary cols XXRate for calculating PrevXXRate
RateNames <- sapply(PrevRateNames, function(x) substring(x, 5, nchar(x)), USE.NAMES = F)
temp[, RateNames]<-NA
# New colname PrevEDSSRateNA for alternative PrevEDSSRate
temp[, "PrevEDSSRateNA"] <- NA
for(i in 1:(nvisits-1)){
dEDSS <- temp[i+1, "ActualEDSS"] - temp[i, "ActualEDSS"]
dMSSS <- temp[i+1, "MSSS"] - temp[i, "MSSS"]
dSPBVC <- temp[i+1, "Siena_PBVC"] - temp[i, "Siena_PBVC"]
dGMV <- temp[i+1, "GM_Volume"] - temp[i, "GM_Volume"]
dDay <-as.numeric(as.Date(temp[i+1,]$ExamDate) - as.Date(temp[i,]$ExamDate))
dYear <- dDay/365
newEPIC <- temp[i+1, "EPICID"]
oldEPIC <- temp[i, "EPICID"]
if (i == 1){
temp[i, RateNames] <- 0
temp[i+1, PrevRateNames] <- 0
temp[i+1, "PrevEDSSRateNA"] <- NA
}
if (oldEPIC != newEPIC){
temp[i+1, RateNames] <- 0
temp[i+2, PrevRateNames] <- 0
temp[i+2, "PrevEDSSRateNA"] <- NA
}else{
temp[i+1, "PrevEDSS"] <- temp[i, "ActualEDSS"]
temp[i+1, "PrevMSSS"] <- temp[i, "MSSS"]
temp[i+1, "PrevSiena_PBVC"] <- temp[i, "Siena_PBVC"]
temp[i+1, "PrevGMV"] <- temp[i, "GM_Volume"]
temp[i+1, "PrevNew_T2_Lesions"] <- temp [i, "New_T2_Lesions"]
temp[i+1, "PrevOpticNeuritis"] <- temp[i, "OpticNeuritis"]
temp[i+1, "PrevVDL"] <- temp[i, "VitaminD_Level"]
temp[i+1, "PrevDiseaseDuration"] <- temp[i, "DiseaseDuration"]
temp[i+1, "PrevRecTreatment"] <- temp[i, "VisitID"] %in% DMTVisitIDs
temp[i+1, "PrevTreatmentTCount"] <- length(unique(treatment[treatment$VisitID == temp[i, "VisitID"], "TreatmentType"]))
temp[i+1, "PrevTreatmentMCount"] <- length(unique(treatment[treatment$VisitID == temp[i, "VisitID"], "TreatmentMolecule"]))
temp[i+1, "EDSSRate"] <- dEDSS/dYear
temp[i+1, "MSSSRate"] <- dMSSS/dYear
temp[i+1, "Siena_PBVCRate"] <- dSPBVC/dYear
temp[i+1, "GMVRate"] <- dGMV/dYear
temp[i+1, PrevRateNames] <- temp[i, RateNames]
temp[i+1, "EDSSRateNA"] <- dEDSS/dYear
temp[i+1, "PrevEDSSRateNA"] <- temp[i, "EDSSRateNA"]
}
}
View(temp[, c("VisitID",names(temp)[grep("PBVC",names(temp))])])
test <- sapply(names(temp), function(x) sum(is.na(temp[, x]))/dim(temp[1]))
test[1,]
cbin(test[1,])
cbind(test[1,])
?merge
sink(file=paste0(datasetName, ".log"), append=F, split = T)
getwd()
datasetName <- "datasetTest"
sink(file=paste0(datasetName, ".log"), append=F, split = T)
cat("### PART I \n")
cat("##", "This is my log with", 1, "file to test \n")
sink()
#### This program generate the testing datasets to evaluate PrevXXRate = 0 or NA for the first record of every patient in python####
## Set up
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source('gather.r')
# Create h5 path
f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
if (! f){
file.remove(filePath)
h5createFile(filePath)
}
load(gatherPath)
file.create(testPath)
####combine<-function(dfs, imp= F, cut = F, rmcols = NULL, tgt)
#EDSS <- merge(target, core[,c("VisitID","PrevEDSS")])
EDSS <- combine(dfs = list(target, core[,c("VisitID","PrevEDSS")]), imp = F, cut = F, rmcols = NULL, tgt = "ModEDSS")
EDSSwEDSSRate <- combine(dfs = list(target, core[, c("VisitID", "PrevEDSS", "PrevEDSSRate")]))
# Can't do this, knnImpute can't do 2 cols
#EDSSwEDSSRate_Imp <- combine(dfs = list(target, coreNA[, c("VisitID", "PrevEDSS", "PrevEDSSRateNA")]), imp = T)
CorewoRate <- combine(dfs = list(target, core), rmcols = c("PrevEDSSRate", "PrevMSSSRate"))
Core <- combine(dfs = list(target, core))
Core_Imp <- combine(dfs = list(target, coreNA), imp = T)
#save(EDSS,EDSSwEDSSRate, EDSSwEDSSRate_Imp,CorewoRate,Core,Core_Imp, file = testPath)
save(EDSS,EDSSwEDSSRate,CorewoRate,Core,Core_Imp, file = testPath)
h5write(EDSS, filePath,"EDSS")
h5write(EDSSwEDSSRate, filePath,"EDSSwEDSSRate")
#h5write(EDSSwEDSSRate_Imp, filePath, "EDSSwEDSSRate_Imp")
h5write(CorewoRate, filePath, "CorewoRate")
h5write(Core, filePath, "Core")
h5write(Core_Imp, filePath, "Core_Imp")
file.copy(filePath, filePathPython, overwrite = TRUE)
#### This program generate everything from gather.r into diserable dataframes ######
#
# DATASETS:
# EDSS
# EDSS&EDSSRate (PrevXXRate = 0)
# EDSS&EDSSRate_Imp (PrevXXRate = NA)
# Core-Rate
# Core
# Core_Imp
# Pick one for core after testing.
# (For the following just use PrevXXRate = 0)
# Core&fam
# Core&modfam
# Core&Static-Overweight
# Core&Static_Imp
# Core&Static_Cut
#   -> Static = Static-OverWeight
#
# Core&Static&fam
# Core&Static&Treatments
#
# CorewStaticwGenetics_Imp
# Core$Static&Genetics_Cut
#
# Core&Static&MRI_Imp
#
# Core&Static$Examination-VDL_Cut (for PrevOpticNeuritis)
# 	exam <- exam-PrevOpticNeuritis
#
# Core&Static&Examination-VDL
# Core&Static&Examination_Imp
# Core&Static&Examination_Cut
#
# Core&Static&Examination&MRI-T2L-VDL_Imp
# Core&Static&Examination&MRI-T2L_Cut(VDL)_Imp
# Core&Static&Examination&MRI-T2L_Imp
# Core&Static&Examination&MRI-VDL_Cut(T2L)_Imp
# Core&Static&Examination&MRI-VDL_Imp
# Core&Static&Examination&MRI_Imp
#
# Set up
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("test.r")
# Create h5 path
# f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
# if (! f){
#   file.remove(filePath)
#   h5createFile(filePath)
# }
load(testPath)
load(gatherPath)
####combine<-function(dfs, imp= F, cut = F, rmcols = NULL, tgt)
#EDSS <- combine(dfs = list(target, core[,c("VisitID","PrevEDSS")]), imp = F, cut = F, rmcols = NULL, tgt = "ModEDSS")
bit1 <- 0
# If bit1 == 1, EDSS&EDSSRate_Imp's performance > EDSS$EDSSRate
if (bit1 == 1){
core <- coreNA
}
CorewFam <- combine(dfs = list(target, core, fam2))
CorewmodFam <- combine(dfs = list(target, core, modfam2))
CorewStaticwoOW <- combine(dfs = list(target, core, static), rmcols = c("Overweight"))
CorewStatic_Imp <- combine(dfs = list(target, core, static), imp = T)
CorewStatic_Cut <- combine(dfs = list(target, core, static), cut = T)
static <- static[, !names(static)%in%c("Overweight")]
CorewStaticwFam <- combine(dfs = list(target, core, static, fam2))
CorewStaticwTreatment <- combine(dfs = list(target, core, static, treatment))
# Too many NA's for genetics
CorewStaticwGenetics_Imp <- combine(dfs = list(target, core, static, genetics), imp = T)
CorewStaticwGenetics_Cut <- combine(dfs = list(target, core, static, genetics), cut = T)
CorewStaticwMRI_Imp <- combine(dfs = list(target, core, static, MRI), imp = T)
# Cut "PrevOpticNeuritis"
CorewStaticwExamwoVDL_Cut <- combine(dfs = list(target, core, static, exam), rmcols = c("PrevVDL"), cut =T)
# Use exam without "PrevOpticNeuritis"
exam <- exam[, ! names(exam)%in%c("PrevOpticNeuritis")]
CorewStaticwExamwoVDL <- combine(dfs = list(target, core, static, exam), rmcols = c("PrevVDL"))
CorewStaticwExam_Imp <- combine(dfs = list(target, core, static, exam), imp = T)
CorewStaticwExam_Cut <- combine(dfs = list(target, core, static, exam), cut = T)
CorewStaticwExamwMRIwoT2LwoVDL_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevNew_T2_Lesions", "PrevVDL"))
CorewStaticwExamwMRIwoT2L_CutVDL_Imp <- combine(dfs = list(target, core, static, exam, MRI), cut = T, cutcols = c("PrevVDL"), imp = T, rmcols = c("PrevNew_T2_Lesions"))
CorewStaticwExamwMRIwoT2L_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevNew_T2_Lesions"))
CorewStaticwExamwMRIwoVDL_CutT2L_Imp <- combine(dfs = list(target, core, static, exam, MRI), cut = T, cutcols = c("PrevNew_T2_Lesions"),imp = T, rmcols = c("PrevVDL"))
CorewStaticwExamwMRIwoVDL_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevVDL"))
CorewStaticwExamwMRI_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T)
#### H5 Save
#h5write(Core_Imp, filePath, "Core_Imp")
h5write(CorewFam, filePath,"CorewFam")
h5write(CorewmodFam, filePath,"CorewmodFam")
h5write(CorewStaticwoOW, filePath,"CorewStaticwoOW")
h5write(CorewStatic_Imp, filePath,"CorewStatic_Imp")
h5write(CorewStatic_Cut, filePath,"CorewStatic_Cut")
h5write(CorewStaticwFam, filePath,"CorewStaticwFam")
h5write(CorewStaticwTreatment, filePath,"CorewStaticwTreatment")
h5write(CorewStaticwGenetics_Imp, filePath,"CorewStaticwGenetics_Imp")
h5write(CorewStaticwGenetics_Cut, filePath,"CorewStaticwGenetics_Cut")
h5write(CorewStaticwMRI_Imp, filePath,"CorewStaticwMRI_Imp")
h5write(CorewStaticwExamwoVDL_Cut, filePath,"CorewStaticwExamwoVDL_Cut")
h5write(CorewStaticwExamwoVDL, filePath, "CorewStaticwExamwoVDL")
h5write(CorewStaticwExam_Imp, filePath,"CorewStaticwExam_Imp")
h5write(CorewStaticwExam_Cut, filePath,"CorewStaticwExam_Cut")
h5write(CorewStaticwExamwMRIwoT2LwoVDL_Imp, filePath,"CorewStaticwExamwMRIwoT2LwoVDL_Imp")
h5write(CorewStaticwExamwMRIwoT2L_CutVDL_Imp, filePath,"CorewStaticwExamwMRIwoT2L_CutVDL_Imp")
h5write(CorewStaticwExamwMRIwoT2L_Imp, filePath,"CorewStaticwExamwMRIwoT2L_Imp")
h5write(CorewStaticwExamwMRIwoVDL_CutT2L_Imp, filePath,"CorewStaticwExamwMRIwoVDL_CutT2L_Imp")
h5write(CorewStaticwExamwMRIwoVDL_Imp , filePath,"CorewStaticwExamwMRIwoVDL_Imp ")
h5write(CorewStaticwExamwMRI_Imp, filePath,"CorewStaticwExamwMRI_Imp")
file.copy(filePath, filePathPython, overwrite = TRUE)
sum(is.na(CorewStaticwExamwMRI_Im))
sum(is.na(CorewStaticwExamwMRI_Imp))
sum(is.na(CorewStaticwExamwMRIwoVDL_Imp))
