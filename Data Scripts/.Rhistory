#merged <- merge(fam2, modfam2, by="VisitID")
merged <- merge(merged, fullTable3)
#merged <- merge(merged, fullTable3, by="VisitId", by.y="VisitID")
# only 5 cols, group1~3, relative-pain, enjoylife
modfam2<-modfam2[,8:12]
# get rid visitID
fam2<-fam2[,-1]
Binarize <- function(df, target){
# to Binarize a target column of a datafram
med <- median(df[[target]])
bin <- df
bin[[target]] <- ifelse(bin[[target]] <= med, 0,1)
return(bin)
}
modfam2_bin <-Binarize(modfam2, "EnjoyLife")
fam2_bin <- Binarize(fam2, "EnjoyLife")
DataProcessing <- function(df, target = ""){
# Processing a data frame to make everything (0, 1] except the target col
if (target == ""){
loc <- ncol(df)+1
} else{
loc <- grep(target, colnames(df))
}
processing <- df
processing <- apply(processing, 2, function(x) (x-min(x))/(max(x)-min(x)))
processing[,-loc] <- apply(processing[,-loc], c(1,2), function(x) if (x == 0) x+1e-12 else x)
as.data.frame(processing)
}
modfam2_processing <- DataProcessing(modfam2_bin, "EnjoyLife")
fam2_processing <- DataProcessing(fam2_bin, "EnjoyLife")
#save fam2, modfam2, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, and  merged in HDF5 format
filePath <- 'data/predData.h5'
h5createFile(filePath)
h5write(fam2, filePath,"fam2")
h5write(modfam2,filePath,"modfam2")
h5write(merged, filePath, "merged")
h5write(fam2_bin, filePath,"fam2_bin")
h5write(modfam2_bin, filePath,"modfam2_bin")
h5write(modfam2_processing, filePath,"modfam2_processing")
h5write(fam2_processing, filePath,"fam2_processing")
filePathPython <- '../../MSPrediction-Python/data/'
file.copy(filePath, filePathPython)
##################Calculate EDSS Rate###########
merged_updated <- merged[order(merged$EPICID, merged$ExamDate),]
# Add Empty EDSSRate col
merged_updated[, "EDSSRate"] <- NA
nvisits <- nrow(merged_updated)
for(i in 1:(nvisits-1)){
dEDSS <- merged_updated[i+1, "ActualEDSS"] - merged_updated[i, "ActualEDSS"]
dDay <- as.numeric(as.Date(merged_updated[i+1,]$ExamDate) - as.Date(merged_updated[i,]$ExamDate))
dYear <- dDay/365
if (merged_updated[i+1, "EPICID"] == merged_updated[i, "EPICID"] ){
merged_updated[i+1, "EDSSRate"] <- dEDSS/dYear
}
}
### one more col in modified EDSSR, ignore abs dEDSSS <= 0.5; 2 class, increase or others
merged_updated[, "ModEDSSR"] <- NA
for(i in 1:(nvisits-1)){
dEDSS <- merged_updated[i+1, "ActualEDSS"] - merged_updated[i, "ActualEDSS"]
dDay <- as.numeric(as.Date(merged_updated[i+1,]$ExamDate) - as.Date(merged_updated[i,]$ExamDate))
dYear <- dDay/365
if (merged_updated[i+1, "EPICID"] == merged_updated[i, "EPICID"] ){
if (abs(dEDSS)<.5){
merged_updated[i+1, "ModEDSSR"] <- 0
} else if (dEDSS< 0){
merged_updated[i+1, "ModEDSSR"] <- -1
} else {
merged_updated[i+1, "ModEDSSR"] <- 1
}
}
}
h5write(merged_updated, "data/predData.h5","merged_updated")
#### DatePrep to use QOL + EDSSRate + EDSS to predict ModEDSSR: Diagnostic #####
diagnoColName = unique(c("EPICID", "ActualEDSS","EDSSRate", "ModEDSSR", colnames(fam2), colnames(modfam2)))
diagno = merged_updated[diagnoColName]
h5write(diagno, "data/predData.h5","diagno")
file.copy(filePath, filePathPython)
View(diagno)
View(diagno)
View(allQOL)
View(fam2)
View(fam2)
View(modfam2)
View(modfam2)
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
# get modified-fam2
require(ggplot2)
require(rhdf5)
require(MASS)
require(fitdistrplus)
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
# Merge fam2, modfam2, fullTable3
#First change fam2 colname "VisitId" to "VisitID"
colnames(fam2)[1] <- "VisitID"
# get rid of column "X" in modfam2
modfam2 <- modfam2[-1]
View(fam2)
View(fam2)
View(modfam2)
View(modfam2)
merged = merge(fam2, modfam2)
merged <- merge(fam2, modfam2, by = "VisitID")
merged = merge(fam2, modfam2)
merged <- merge(fam2, modfam2, by = "VisitID")
View(merged)
View(merged)
merged["EnjoyLife.x"] == merged["EnjoyLife.y]
?
edfsa
dfa
merged["EnjoyLife.x"]
merged["EnjoyLife.x"]
merged["EnjoyLife.y"]
merged["EnjoyLife.y"] == merged["EnjoyLife.x"]
merged["EnjoyLife.x"] <- NULL
View(merged)
View(merged)
merged <- merge(fam2, modfam2, by = "VisitID")
merged["EnjoyLife.x"] <- NULL
merged <- merge(fam2, modfam2)
merged <- merge(fam2, modfam2, by = "VisitID")
merged["EnjoyLife.x"] <- NULL
merged <- merge(merged, fullTable3, by = "VisitID")
merged <- merge(fam2, modfam2, by = "VisitID")
merged["EnjoyLife.x"] <- NULL
merged <- merge(merged, fullTable3)
merged <- merge(fam2, modfam2, by = "VisitID")
merged["EnjoyLife.x"] <- NULL
merged <- merge(merged, fullTable3, by = "VisitID")
merged <- merge(fam2, modfam2, by = "VisitID")
merged["EnjoyLife.x"] <- NULL
merged <- merge(fam2, modfam2, by="VisitId", by.y="VisitID")
merged <- merge(fam2, modfam2, by = "VisitID")
merged["EnjoyLife.x"] <- NULL
View(merged)
View(merged)
merged <- merge(merged, fullTable3, by = "VisitID")
View(merged)
View(merged)
merged <- merge(fam2, modfam2, by = "VisitID")
merged["EnjoyLife.x"] <- NULL
merged0 <- merge(merged, fullTable3, by = "VisitID")
merged1 <- merge(merged, fullTable3)
colnames(merged)
colnames(merged1)-colnames(merged0)
A =  colnames(merged1)
B = colnames(merged0)
intersect(A, B)
setdiff(A,B)
setdiff(B,A)
venn(list(A.vector = A, B.vector = B))
require("gplots")
library("gplots")
install.packages("gplots")
venn(list(A.vector = A, B.vector = B))
require("gplot")
library("gplots")
venn(list(A.vector = A, B.vector = B))
View(merged1)
View(merged1)
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
# get modified-fam2
require(ggplot2)
require(rhdf5)
require(MASS)
require(fitdistrplus)
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
rename(fam2, c("VisitId" = "VisitID"))
names(fam)
names(fam2)
names
library("plyr", lib.loc="/Users/rexren/Library/R/3.1/library")
install.packages("plyr")
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
# get modified-fam2
require(ggplot2)
require(rhdf5)
require(MASS)
require(fitdistrplus)
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
reanme(fam2, c("VisitId"="VisitID"))
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
# get modified-fam2
require(ggplot2)
require(rhdf5)
require(MASS)
require(fitdistrplus)
require(plyr)
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
# Merge fam2, modfam2, fullTable3
#First change fam2 colname "VisitId" to "VisitID"
reanme(fam2, c("VisitId"="VisitID"))
rename(fam2, c("VisitId"="VisitID"))
View(fam2)
View(fam2)
colnames(fam2)[colnames(fam2) == "VisitId"] <- "VisitID"
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
# get modified-fam2
require(ggplot2)
require(rhdf5)
require(MASS)
require(fitdistrplus)
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
####### Merge fam2, modfam2, fullTable3 ######
#First change fam2 colname "VisitId" to "VisitID"
colnames(fam2)[colnames(fam2) == "VisitId"] <- "VisitID"
# get rid of column "X" in modfam2
modfam2["X"] <- NULL
merged <- merge(fam2, modfam2, by = "VisitID")
# Remove "EnjoyLife.x" column because "EnjoyLife.x" and "EnjoyLife.y" are the same
merged["EnjoyLife.x"] <- NULL
colnames(merged)[colnames(merged) == "EnjoyLife.y"] <- "EnjoyLife"
merged0 <- merge(merged, fullTable3, by = "VisitID")
View(fullTable3)
View(fullTable3)
A = fullTalbe3$VisitID
A = fullTable3$VisitID
B = merged$VisitID
setdiff(B,A)
setdiff(A,B)
merged <- merge(merged, fullTable3, by = "VisitID")
# For modfam2, only preserve 5 cols for analytic purpose: group1~3, relative-pain, enjoylife
modfam2<-modfam2[,8:12]
# For fam2, get rid of VisitID
fam2["VisitID"]<- NULL
Binarize <- function(df, target){
# to Binarize a target column of a datafram
med <- median(df[[target]])
bin <- df
bin[[target]] <- ifelse(bin[[target]] <= med, 0,1)
return(bin)
}
modfam2_bin <-Binarize(modfam2, "EnjoyLife")
fam2_bin <- Binarize(fam2, "EnjoyLife")
DataProcessing <- function(df, target = ""){
# Processing a data frame to make everything (0, 1] except the target col
if (target == ""){
loc <- ncol(df)+1
} else{
loc <- grep(target, colnames(df))
}
processing <- df
processing <- apply(processing, 2, function(x) (x-min(x))/(max(x)-min(x)))
processing[,-loc] <- apply(processing[,-loc], c(1,2), function(x) if (x == 0) x+1e-12 else x)
as.data.frame(processing)
}
modfam2_processing <- DataProcessing(modfam2_bin, "EnjoyLife")
fam2_processing <- DataProcessing(fam2_bin, "EnjoyLife")
#save fam2, modfam2, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, and  merged in HDF5 format
filePath <- 'data/predData.h5'
h5createFile(filePath)
h5write(fam2, filePath,"fam2")
h5write(modfam2,filePath,"modfam2")
h5write(merged, filePath, "merged")
h5write(fam2_bin, filePath,"fam2_bin")
h5write(modfam2_bin, filePath,"modfam2_bin")
h5write(modfam2_processing, filePath,"modfam2_processing")
h5write(fam2_processing, filePath,"fam2_processing")
filePathPython <- '../../MSPrediction-Python/data/'
file.copy(filePath, filePathPython)
filePath <- 'data/predData.h5'
h5createFile(filePath)
filePath <- 'data/predData.h5'
h5createFile(filePath)
! h5createFile(filePath)
file.remove(filePath)
f
f <- h5createFile(filePath)
f
filePath <- 'data/predData.h5'
f <- h5createFile(filePath)
if (! f){
file.remove(filePath)
f
}
h5write(fam2, filePath,"fam2")
filePath <- 'data/predData.h5'
f <- h5createFile(filePath)
if (! f){
file.remove(filePath)
h5createFile(filePath)
}
h5write(fam2, filePath,"fam2")
h5write(modfam2,filePath,"modfam2")
h5write(merged, filePath, "merged")
h5write(fam2_bin, filePath,"fam2_bin")
h5write(modfam2_bin, filePath,"modfam2_bin")
h5write(modfam2_processing, filePath,"modfam2_processing")
h5write(fam2_processing, filePath,"fam2_processing")
filePathPython <- '../../MSPrediction-Python/data/'
file.copy(filePath, filePathPython)
##################Calculate EDSS Rate###########
merged_updated <- merged[order(merged$EPICID, merged$ExamDate),]
# Add Empty EDSSRate col
merged_updated[, "EDSSRate"] <- NA
nvisits <- nrow(merged_updated)
for(i in 1:(nvisits-1)){
dEDSS <- merged_updated[i+1, "ActualEDSS"] - merged_updated[i, "ActualEDSS"]
dDay <- as.numeric(as.Date(merged_updated[i+1,]$ExamDate) - as.Date(merged_updated[i,]$ExamDate))
dYear <- dDay/365
if (merged_updated[i+1, "EPICID"] == merged_updated[i, "EPICID"] ){
merged_updated[i+1, "EDSSRate"] <- dEDSS/dYear
}
}
### Add one column 'ModEDSSR' (modified EDSSR): if ignore abs dEDSSS <= 0.5, or decrease = > Class 0; Otherwise => Class 1
merged_updated[, "ModEDSSR"] <- NA
for(i in 1:(nvisits-1)){
dEDSS <- merged_updated[i+1, "ActualEDSS"] - merged_updated[i, "ActualEDSS"]
dDay <- as.numeric(as.Date(merged_updated[i+1,]$ExamDate) - as.Date(merged_updated[i,]$ExamDate))
dYear <- dDay/365
if (merged_updated[i+1, "EPICID"] == merged_updated[i, "EPICID"] ){
if (abs(dEDSS)<.5){
merged_updated[i+1, "ModEDSSR"] <- 0
} else if (dEDSS< 0){
merged_updated[i+1, "ModEDSSR"] <- 0
} else {
merged_updated[i+1, "ModEDSSR"] <- 1
}
}
}
h5write(merged_updated, "data/predData.h5","merged_updated")
#### DatePrep to use QOL + EDSSRate + EDSS to predict ModEDSSR: Diagnostic #####
diagnoColName = unique(c("EPICID", "ActualEDSS","EDSSRate", "ModEDSSR", colnames(fam2), colnames(modfam2)))
diagno = merged_updated[diagnoColName]
h5write(diagno, "data/predData.h5","diagno")
file.copy(filePath, filePathPython)
merged_updated <- merged[order(merged$EPICID, merged$ExamDate),]
merged_updated <- merged[order(merged$EPICID, merged$ExamDate),]
View(merged)
View(merged)
merged$EPICID
merged["EPICID.x"]
merged["EPICID.x"]  == merged["EPICID.y"]
if(merged["EPICID.x"]  == merged["EPICID.y"])
print("yes")
if(unique(merged["EPICID.x"]  == merged["EPICID.y"]))
print("yes")
View(fam2)
View(fam2)
View(modfam2)
View(modfam2)
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
# get modified-fam2
require(ggplot2)
require(rhdf5)
require(MASS)
require(fitdistrplus)
require(plyr)
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
rename(fam2, c("VisitId"="VisitID"))
View(fam2)
View(fam2)
fam2<-rename(fam2, c("VisitId"="VisitID"))
View(fam2)
View(fam2)
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
# get modified-fam2
require(ggplot2)
require(rhdf5)
require(MASS)
require(fitdistrplus)
require(plyr)
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
####### Merge fam2, modfam2, fullTable3 ######
#First change fam2 colname "VisitId" to "VisitID"
fam2 <- rename(fam2, c("VisitId"="VisitID"))
#colnames(fam2)[colnames(fam2) == "VisitId"] <- "VisitID"
# For modfam2, get rid of column "X", and change "RelativePain" column to "uniRelativePain" to avoid confusion when merging modfam2 and fam2
modfam2["X"] <- NULL
modfam2 <- rename(modfam2, c("RelativePain" = "uniRelativePain"))
merged <- merge(fam2, modfam2)
merged1 <- merge(fam2, modfam2, by = "VisitID")
modfam2["Group1"]
modfam2["group1"]
modfam2["group1", "group2"]
modfam2[c("group1","group2")]
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
# get modified-fam2
require(ggplot2)
require(rhdf5)
require(MASS)
require(fitdistrplus)
require(plyr)
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
####### Merge fam2, modfam2, fullTable3 ######
#First change fam2 colname "VisitId" to "VisitID"
fam2 <- rename(fam2, c("VisitId"="VisitID"))
# colnames(fam2)[colnames(fam2) == "VisitId"] <- "VisitID"
# For modfam2, get rid of column "X", and change "RelativePain" column to "modRelativePain" to avoid confusion when merging modfam2 and fam2
modfam2["X"] <- NULL
modfam2 <- rename(modfam2, c("RelativePain" = "modRelativePain"))
merged <- merge(fam2, modfam2)
merged <- merge(merged, fullTable3)
# For modfam2, only preserve 5 cols for analytic purpose: group1~3, relative-pain, enjoylife
modfam2<-modfam2[c("group1", "group2", "group3", "modRelativePain","EnjoyLife")]
# For fam2, get rid of VisitID
fam2["VisitID"]<- NULL
Binarize <- function(df, target){
# to Binarize a target column of a datafram
med <- median(df[[target]])
bin <- df
bin[[target]] <- ifelse(bin[[target]] <= med, 0,1)
return(bin)
}
modfam2_bin <-Binarize(modfam2, "EnjoyLife")
fam2_bin <- Binarize(fam2, "EnjoyLife")
DataProcessing <- function(df, target = ""){
# Processing a data frame to make everything (0, 1] except the target col
if (target == ""){
loc <- ncol(df)+1
} else{
loc <- grep(target, colnames(df))
}
processing <- df
processing <- apply(processing, 2, function(x) (x-min(x))/(max(x)-min(x)))
processing[,-loc] <- apply(processing[,-loc], c(1,2), function(x) if (x == 0) x+1e-12 else x)
as.data.frame(processing)
}
modfam2_processing <- DataProcessing(modfam2_bin, "EnjoyLife")
fam2_processing <- DataProcessing(fam2_bin, "EnjoyLife")
# Save fam2, modfam2, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, and  merged in HDF5 format
filePath <- 'data/predData.h5'
f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
if (! f){
file.remove(filePath)
h5createFile(filePath)
}
h5write(fam2, filePath,"fam2")
h5write(modfam2,filePath,"modfam2")
h5write(merged, filePath, "merged")
h5write(fam2_bin, filePath,"fam2_bin")
h5write(modfam2_bin, filePath,"modfam2_bin")
h5write(modfam2_processing, filePath,"modfam2_processing")
h5write(fam2_processing, filePath,"fam2_processing")
# Copy predData.h5 to python folder
filePathPython <- '../../MSPrediction-Python/data/'
file.copy(filePath, filePathPython)
##################Calculate EDSS Rate###########
merged_updated <- merged[order(merged$EPICID, merged$ExamDate),]
# Add Empty EDSSRate col
merged_updated[, "EDSSRate"] <- NA
nvisits <- nrow(merged_updated)
for(i in 1:(nvisits-1)){
dEDSS <- merged_updated[i+1, "ActualEDSS"] - merged_updated[i, "ActualEDSS"]
dDay <- as.numeric(as.Date(merged_updated[i+1,]$ExamDate) - as.Date(merged_updated[i,]$ExamDate))
dYear <- dDay/365
if (merged_updated[i+1, "EPICID"] == merged_updated[i, "EPICID"] ){
merged_updated[i+1, "EDSSRate"] <- dEDSS/dYear
}
}
### Add one column 'ModEDSSR' (modified EDSSR): if ignore abs dEDSSS <= 0.5, or decrease = > Class 0; Otherwise => Class 1
merged_updated[, "ModEDSSR"] <- NA
for(i in 1:(nvisits-1)){
dEDSS <- merged_updated[i+1, "ActualEDSS"] - merged_updated[i, "ActualEDSS"]
dDay <- as.numeric(as.Date(merged_updated[i+1,]$ExamDate) - as.Date(merged_updated[i,]$ExamDate))
dYear <- dDay/365
if (merged_updated[i+1, "EPICID"] == merged_updated[i, "EPICID"] ){
if (abs(dEDSS)<.5){
merged_updated[i+1, "ModEDSSR"] <- 0
} else if (dEDSS< 0){
merged_updated[i+1, "ModEDSSR"] <- 0
} else {
merged_updated[i+1, "ModEDSSR"] <- 1
}
}
}
h5write(merged_updated, "data/predData.h5","merged_updated")
diagnoColName = unique(c("EPICID", "ActualEDSS","EDSSRate", "ModEDSSR", colnames(fam2), colnames(modfam2)))
diagno = merged_updated[diagnoColName]
h5write(diagno, "data/predData.h5","diagno")
file.copy(filePath, filePathPython
)
View(diagno)
View(diagno)
colnames(diagno)
View(allQOL)
gendist(merged_updated, geom_histogram, "ModEDSSR", "merged_updated")
gendist<-function(somedf, plotfunc, target, filename){
# Plotting distribution (histogram/density) given a dataframe and a target column, and a filename
# Args:
#    somdf: dataframe
#    plotfunc: geom_histogram or geom_density
#    target: target column
#    filename: filename given to the hitogram to generate
#
# Returns:
#   hitogram on target column
pfname = deparse(substitute(plotfunc))
filepath = paste("plots/",paste(filename, pfname, sep = "_"), ".pdf",sep="")
somedf_noNA <- somedf[!is.na(somedf[target]),]
ggplot(somedf_noNA) + plotfunc(aes_string(x=target))
ggsave(file=filepath)
}
gendist(merged_updated, geom_histogram, "ModEDSSR", "merged_updated")
gendist(merged_updated, geom_density, "EDSSRate", "merged_updated")
