demo()
dnorm
help()
dbinom(2.51)
pnorm(0)
binorm(2.51)
bnorm(2.51)
pnorm(2.51)
n=200
p=.45
q=
.55
sqrt(npq)
sqrt(n*p*q)
sd=sqrt(n*p*q)
sd
sd
mu=n*p
pnorm((mu+.5-mu)/sd)-pnorm((mu-.5-mu)/sd)
pnorm(10.5/7.0356)
*-1
1-pnorm(10.5/7.0356)
1-pnorm(100.5-mu/sd)
1-pnorm(100.5-mu/sd)
1-pnorm(100.5-90/7.0356)
1-pnorm(10.5/7.0356)
1-pnorm((100.5-mu)/sd)
pnorm((100.5-100/5)-pnorm((99.5-100)/5)
pnorm((100.5-100/5)-pnorm((99.5-100)/5)
pnorm((100.5-100/5))-pnorm((99.5-100)/5)
clc
clearn
clear
clean
sqrt(100/4)
sqrt(200/4)
sd=sqrt(200/4)
pnorm((100.5-100)/sd)-pnorm((99.5-100)/sd)
e^(100) * 100^0
exp(100) * 100^0
exp(-100) * 100^0
exp(-0.0567198*30)
3exp(-2)
3*exp(-2)
2*exp(-2)
1-5*exp(-2)
6*exp(-4)
exp(5/3) *(5/3)^2 /2
exp(.5) *(.6)^2 /2
exp(.5) *(.6)
exp(.6) *(.6)
exp(.6) *(.6)^2/2
exp(.6) *(.6)
exp(-5/3) *(5/3)^2 /2
exp(-5/3) *(5/3)
exp(-5/3) *(5/3)
exp(-5/3)
exp(-5/3) *8/3
load("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts/step3/data.RData")
str(allQOL)
ls
ls()
str(fam2)
str(fam)
str(fams)
load("./step1/result.RData")
load("step1/result.RData")
load("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts/step1/result.RData")
ls()
str(allQOL)
load("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts/step0/result.RData")
...
install.packages("xlsx")
install.packages("foreign")
install.packages("foreach")
install.packages("multicore")
install.packages("XML")
install.packages("googleVis")
install.packages("reshape")
install.packages("xlsx")
install.packages("foreign")
install.packages("foreign")
"foreach"
install.packages("foreach")
install.packages("foreach")
install.packages("multicore")
install.packages(c("lattice", "Matrix", "mgcv", "nlme", "rpart", "survival"))
install.packages("XML")
install.packages("googleVis")
install.packages("googleVis")
install.packages("reshape")
library("spatial", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("splines", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("multicore", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("parallel", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("XML", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("reshape", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("foreach", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
ls()
for g in c(4:7){}
1808/2187
require(ggplot2)
require(rhdf5)
pnorm(1.363)
1-pnorm(1.3363)
1-pnorm(.3095800853708794)
1-pnorm(1.3095800853708794)
pnorm(.1)-pnorm(-.1)
13^2/15^2
13^2/15^2*.5
1-(5/15)^10
1+(5/15)^10-2*(10/15)^10
x=1
y =5*.5^4*x-x^5/5
x=.5
x =1
x = .5
y2 =5*.5^4*x-x^5/5
y2-y1
y2-y
x =1
y =5*.5^4*x-x^5
y2 =5*.5^4*x-x^5
x=.5
y2 =5*.5^4*x-x^5
y2=y
y2 =5*.5^4*x-x^5
y2-y
31/32
y2 =-5*.5^4*x+x^5
x=1
y =-5*.5^4*x+x^5
y-y2
31/32
5(1/5-.5^4-(.5^5/5-.5^5))
u=5(1/5-.5^4-(.5^5/5-.5^5))
5(1/5-.5^4-(.5^5/5-.5^5)))
pnorm(5/sqrt(13))
1-pnorm(5/sqrt(13))
2pnorm(1)-pnorm(1)^2
2*pnorm(1)-pnorm(1)^2
pnorm(1)-pnorm(-1)
pnorm(1/sqrt(2))
pnorm(1)-pnorm(-1)
pnorm(2000/sqrt(2000000))
1-pnorm(2000/sqrt(2000000))
1-pnorm(1.41
)
(1-pnorm(1))*(1-pnorm(-1))
#### This program generate everything from gather.r into diserable dataframes ######
#
# DATASETS:
# EDSS
# EDSS&EDSSRate (PrevXXRate = 0)
# EDSS&EDSSRate_Imp (PrevXXRate = NA)
# Core-Rate
# Core
# Core_Imp
# Pick one for core after testing.
# (For the following just use PrevXXRate = 0)
# Core&fam
# Core&modfam
# Core&Static-Overweight
# Core&Static_Imp
# Core&Static_Cut
#   -> Static = Static-OverWeight
#
# Core&Static&fam
# Core&Static&Treatments
#
# CorewStaticwGenetics_Imp
# Core$Static&Genetics_Cut
#
# Core&Static&MRI_Imp
#
# Core&Static&ExamwoVDL_Cut (for PrevOpticNeuritis)
# 	exam <- exam-PrevOpticNeuritis
#
# Core&Static&Examination-VDL
# Core&Static&Examination_Imp
# Core&Static&Examination_Cut
#
# Core&Static&Examination&MRI-T2L-VDL_Imp
# Core&Static&Examination&MRI-T2L_Cut(VDL)_Imp
# Core&Static&Examination&MRI-T2L_Imp
# Core&Static&Examination&MRI-VDL_Cut(T2L)_Imp
# Core&Static&Examination&MRI-VDL_Imp
# Core&Static&Examination&MRI_Imp
#
# Set up
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("test.r")
# Create h5 path
# f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
# if (! f){
#   file.remove(filePath)
#   h5createFile(filePath)
# }
load(testPath)
load(gatherPath)
####combine<-function(dfs, imp= F, cut = F, rmcols = NULL, tgt)
#EDSS <- combine(dfs = list(target, core[,c("VisitID","PrevEDSS")]), imp = F, cut = F, rmcols = NULL, tgt = "ModEDSS")
bit1 <- 0
# If bit1 == 1, EDSS&EDSSRate_Imp's performance > EDSS$EDSSRate
if (bit1 == 1){
core <- coreNA
}
CorewFam <- combine(dfs = list(target, core, fam2))
CorewmodFam <- combine(dfs = list(target, core, modfam2))
is.na(CorewmodFam)
sum(is.na(CorewmodFam))
sum(is.na(CorewFam))
sum(is.na(CorewStaticwoOW ))
CorewStaticwoOW <- combine(dfs = list(target, core, static), rmcols = c("Overweight"))
CorewStatic_Imp <- combine(dfs = list(target, core, static), imp = T)
CorewStatic_Cut <- combine(dfs = list(target, core, static), cut = T)
static <- static[, !names(static)%in%c("Overweight")]
CorewStaticwFam <- combine(dfs = list(target, core, static, fam2))
CorewStaticwTreatment <- combine(dfs = list(target, core, static, treatment))
# Too many NA's for genetics
CorewStaticwGenetics_Imp <- combine(dfs = list(target, core, static, genetics), imp = T)
CorewStaticwGenetics_Cut <- combine(dfs = list(target, core, static, genetics), cut = T)
CorewStaticwMRI_Imp <- combine(dfs = list(target, core, static, MRI), imp = T)
# Cut "PrevOpticNeuritis"
CorewStaticwExamwoVDL_Cut <- combine(dfs = list(target, core, static, exam), rmcols = c("PrevVDL"), cut =T)
# Use exam without "PrevOpticNeuritis"
exam <- exam[, ! names(exam)%in%c("PrevOpticNeuritis")]
CorewStaticwExamwoVDL <- combine(dfs = list(target, core, static, exam), rmcols = c("PrevVDL"))
CorewStaticwExam_Imp <- combine(dfs = list(target, core, static, exam), imp = T)
CorewStaticwExam_Cut <- combine(dfs = list(target, core, static, exam), cut = T)
CorewStaticwExamwMRIwoT2LwoVDL_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevNew_T2_Lesions", "PrevVDL"))
CorewStaticwExamwMRIwoT2L_CutVDL_Imp <- combine(dfs = list(target, core, static, exam, MRI), cut = T, cutcols = c("PrevVDL"), imp = T, rmcols = c("PrevNew_T2_Lesions"))
CorewStaticwExamwMRIwoT2L_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevNew_T2_Lesions"))
CorewStaticwExamwMRIwoVDL_CutT2L_Imp <- combine(dfs = list(target, core, static, exam, MRI), cut = T, cutcols = c("PrevNew_T2_Lesions"),imp = T, rmcols = c("PrevVDL"))
CorewStaticwExamwMRIwoVDL_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevVDL"))
CorewStaticwExamwMRI_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T)
sum(is.na(CorewStaticwExamwMRI_Imp))
sum(is.na(CorewStaticwExamwMRIwoVDL_Im))
sum(is.na(CorewStaticwExamwMRIwoVDL_Imp))
sum(is.na(CorewStaticwExamwMRIwoT2L_CutVDL_Imp))
sum(is.na(CorewStaticwExamwMRIwoT2LwoVDL_Imp))
sum(is.na(CorewStaticwExam_Cut))
subset(CorewFam, is.na(CorewFam))
CorewFam(is.na(CorewFam),)
CorewFam(is.na(CorewFam),)
CorewFam[is.na(CorewFam),]
CorewFam[!complete.cases(CorewFam),]
test <-CorewFam[!complete.cases(CorewFam),]
View(test)
View(CorewFam)
View(CorewFam)
!complete.cases(CorewFam)
sum(CorewStaticwExam_Cut)
sum(!complete.cases(CorewFam))
saveList <- c("CorewFam","CorewmodFam", "CorewStaticwoOW", "CorewStatic_Imp", "CorewStatic_Cut", "CorewStaticwFam", "CorewStaticwTreatment", "CorewStaticwGenetics_Imp", "CorewStaticwGenetics_Cut", "CorewStaticwMRI_Imp", "CorewStaticwExamwoVDL_Cut", "CorewStaticwExamwoVDL", "CorewStaticwExam_Imp", "CorewStaticwExam_Cut", "CorewStaticwExamwMRIwoT2LwoVDL_Imp", "CorewStaticwExamwMRIwoT2L_CutVDL_Imp", "CorewStaticwExamwMRIwoT2L_Imp", "CorewStaticwExamwMRIwoVDL_CutT2L_Imp", "CorewStaticwExamwMRIwoVDL_Imp", "CorewStaticwExamwMRI_Imp")
for (1 in saveList){}
for (1 in saveList){sum(!is.complete.cases(getDfName(i)))}
for (1 in saveList){sum(!is.complete.cases(get(i)))}
for (i in saveList){sum(!is.complete.cases(get(i)))}
for (i in saveList){sum(!complete.cases(get(i)))}
for (i in saveList){sum(!complete.cases(get(i)))}
for (i in saveList){
sum(!complete.cases(get(i)))}
for (i in saveList){
print (sum(!complete.cases(get(i)))}
for (i in saveList){
print(sum(!complete.cases(get(i))))}
#### This program generate everything from gather.r into diserable dataframes ######
#
# DATASETS:
# EDSS
# EDSS&EDSSRate (PrevXXRate = 0)
# EDSS&EDSSRate_Imp (PrevXXRate = NA)
# Core-Rate
# Core
# Core_Imp
# Pick one for core after testing.
# (For the following just use PrevXXRate = 0)
# Core&fam
# Core&modfam
# Core&Static-Overweight
# Core&Static_Imp
# Core&Static_Cut
#   -> Static = Static-OverWeight
#
# Core&Static&fam
# Core&Static&Treatments
#
# CorewStaticwGenetics_Imp
# Core$Static&Genetics_Cut
#
# Core&Static&MRI_Imp
#
# Core&Static&ExamwoVDL_Cut (for PrevOpticNeuritis)
# 	exam <- exam-PrevOpticNeuritis
#
# Core&Static&Examination-VDL
# Core&Static&Examination_Imp
# Core&Static&Examination_Cut
#
# Core&Static&Examination&MRI-T2L-VDL_Imp
# Core&Static&Examination&MRI-T2L_Cut(VDL)_Imp
# Core&Static&Examination&MRI-T2L_Imp
# Core&Static&Examination&MRI-VDL_Cut(T2L)_Imp
# Core&Static&Examination&MRI-VDL_Imp
# Core&Static&Examination&MRI_Imp
#
# Set up
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("test.r")
# Create h5 path
# f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
# if (! f){
#   file.remove(filePath)
#   h5createFile(filePath)
# }
load(testPath)
load(gatherPath)
####combine<-function(dfs, imp= F, cut = F, rmcols = NULL, tgt)
#EDSS <- combine(dfs = list(target, core[,c("VisitID","PrevEDSS")]), imp = F, cut = F, rmcols = NULL, tgt = "ModEDSS")
bit1 <- 0
# If bit1 == 1, EDSS&EDSSRate_Imp's performance > EDSS$EDSSRate
if (bit1 == 1){
core <- coreNA
}
CorewFam_Imp <- combine(dfs = list(target, core, fam2), imp = T)
CorewmodFam_Imp <- combine(dfs = list(target, core, modfam2), imp = T)
CorewStaticwoOW <- combine(dfs = list(target, core, static), rmcols = c("Overweight"))
CorewStatic_Imp <- combine(dfs = list(target, core, static), imp = T)
CorewStatic_Cut <- combine(dfs = list(target, core, static), cut = T)
static <- static[, !names(static)%in%c("Overweight")]
CorewStaticwFam <- combine(dfs = list(target, core, static, fam2), imp = T)
CorewStaticwTreatment <- combine(dfs = list(target, core, static, treatment))
# Too many NA's for genetics
CorewStaticwGenetics_Imp <- combine(dfs = list(target, core, static, genetics), imp = T)
CorewStaticwGenetics_Cut <- combine(dfs = list(target, core, static, genetics), cut = T)
CorewStaticwMRI_Imp <- combine(dfs = list(target, core, static, MRI), imp = T)
# Cut "PrevOpticNeuritis"
CorewStaticwExamwoVDL_Cut <- combine(dfs = list(target, core, static, exam), rmcols = c("PrevVDL"), cut =T)
# Use exam without "PrevOpticNeuritis"
exam <- exam[, ! names(exam)%in%c("PrevOpticNeuritis")]
CorewStaticwExamwoVDL <- combine(dfs = list(target, core, static, exam), rmcols = c("PrevVDL"))
CorewStaticwExam_Imp <- combine(dfs = list(target, core, static, exam), imp = T)
CorewStaticwExam_Cut <- combine(dfs = list(target, core, static, exam), cut = T)
CorewStaticwExamwMRIwoT2LwoVDL_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevNew_T2_Lesions", "PrevVDL"))
CorewStaticwExamwMRIwoT2L_CutVDL_Imp <- combine(dfs = list(target, core, static, exam, MRI), cut = T, cutcols = c("PrevVDL"), imp = T, rmcols = c("PrevNew_T2_Lesions"))
CorewStaticwExamwMRIwoT2L_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevNew_T2_Lesions"))
CorewStaticwExamwMRIwoVDL_CutT2L_Imp <- combine(dfs = list(target, core, static, exam, MRI), cut = T, cutcols = c("PrevNew_T2_Lesions"),imp = T, rmcols = c("PrevVDL"))
CorewStaticwExamwMRIwoVDL_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevVDL"))
CorewStaticwExamwMRI_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T)
#### H5 Save
#h5write(Core_Imp, filePath, "Core_Imp")
saveList <- c("CorewFam","CorewmodFam", "CorewStaticwoOW", "CorewStatic_Imp", "CorewStatic_Cut", "CorewStaticwFam", "CorewStaticwTreatment", "CorewStaticwGenetics_Imp", "CorewStaticwGenetics_Cut", "CorewStaticwMRI_Imp", "CorewStaticwExamwoVDL_Cut", "CorewStaticwExamwoVDL", "CorewStaticwExam_Imp", "CorewStaticwExam_Cut", "CorewStaticwExamwMRIwoT2LwoVDL_Imp", "CorewStaticwExamwMRIwoT2L_CutVDL_Imp", "CorewStaticwExamwMRIwoT2L_Imp", "CorewStaticwExamwMRIwoVDL_CutT2L_Imp", "CorewStaticwExamwMRIwoVDL_Imp", "CorewStaticwExamwMRI_Imp")
for (i in saveList){
h5write(get(i), filePath, getDfName(i, newModEDSS))
}
file.copy(filePath, filePathPython, overwrite = TRUE)
#### This program generate everything from gather.r into diserable dataframes ######
#
# DATASETS:
# EDSS
# EDSS&EDSSRate (PrevXXRate = 0)
# EDSS&EDSSRate_Imp (PrevXXRate = NA)
# Core-Rate
# Core
# Core_Imp
# Pick one for core after testing.
# (For the following just use PrevXXRate = 0)
# Core&fam
# Core&modfam
# Core&Static-Overweight
# Core&Static_Imp
# Core&Static_Cut
#   -> Static = Static-OverWeight
#
# Core&Static&fam
# Core&Static&Treatments
#
# CorewStaticwGenetics_Imp
# Core$Static&Genetics_Cut
#
# Core&Static&MRI_Imp
#
# Core&Static&ExamwoVDL_Cut (for PrevOpticNeuritis)
# 	exam <- exam-PrevOpticNeuritis
#
# Core&Static&Examination-VDL
# Core&Static&Examination_Imp
# Core&Static&Examination_Cut
#
# Core&Static&Examination&MRI-T2L-VDL_Imp
# Core&Static&Examination&MRI-T2L_Cut(VDL)_Imp
# Core&Static&Examination&MRI-T2L_Imp
# Core&Static&Examination&MRI-VDL_Cut(T2L)_Imp
# Core&Static&Examination&MRI-VDL_Imp
# Core&Static&Examination&MRI_Imp
#
# Set up
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("test.r")
# Create h5 path
# f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
# if (! f){
#   file.remove(filePath)
#   h5createFile(filePath)
# }
load(testPath)
load(gatherPath)
####combine<-function(dfs, imp= F, cut = F, rmcols = NULL, tgt)
#EDSS <- combine(dfs = list(target, core[,c("VisitID","PrevEDSS")]), imp = F, cut = F, rmcols = NULL, tgt = "ModEDSS")
bit1 <- 0
# If bit1 == 1, EDSS&EDSSRate_Imp's performance > EDSS$EDSSRate
if (bit1 == 1){
core <- coreNA
}
CorewFam_Cut <- combine(dfs = list(target, core, fam2), cut = T)
CorewmodFam_Cut <- combine(dfs = list(target, core, modfam2), cut = T)
CorewStaticwoOW <- combine(dfs = list(target, core, static), rmcols = c("Overweight"))
CorewStatic_Imp <- combine(dfs = list(target, core, static), imp = T)
CorewStatic_Cut <- combine(dfs = list(target, core, static), cut = T)
static <- static[, !names(static)%in%c("Overweight")]
CorewStaticwFam_Cut <- combine(dfs = list(target, core, static, fam2), cut = T)
CorewStaticwTreatment <- combine(dfs = list(target, core, static, treatment))
# Too many NA's for genetics
CorewStaticwGenetics_Imp <- combine(dfs = list(target, core, static, genetics), imp = T)
CorewStaticwGenetics_Cut <- combine(dfs = list(target, core, static, genetics), cut = T)
CorewStaticwMRI_Imp <- combine(dfs = list(target, core, static, MRI), imp = T)
# Cut "PrevOpticNeuritis"
CorewStaticwExamwoVDL_Cut <- combine(dfs = list(target, core, static, exam), rmcols = c("PrevVDL"), cut =T)
# Use exam without "PrevOpticNeuritis"
exam <- exam[, ! names(exam)%in%c("PrevOpticNeuritis")]
CorewStaticwExamwoVDL <- combine(dfs = list(target, core, static, exam), rmcols = c("PrevVDL"))
CorewStaticwExam_Imp <- combine(dfs = list(target, core, static, exam), imp = T)
CorewStaticwExam_Cut <- combine(dfs = list(target, core, static, exam), cut = T)
CorewStaticwExamwMRIwoT2LwoVDL_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevNew_T2_Lesions", "PrevVDL"))
CorewStaticwExamwMRIwoT2L_CutVDL_Imp <- combine(dfs = list(target, core, static, exam, MRI), cut = T, cutcols = c("PrevVDL"), imp = T, rmcols = c("PrevNew_T2_Lesions"))
CorewStaticwExamwMRIwoT2L_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevNew_T2_Lesions"))
CorewStaticwExamwMRIwoVDL_CutT2L_Imp <- combine(dfs = list(target, core, static, exam, MRI), cut = T, cutcols = c("PrevNew_T2_Lesions"),imp = T, rmcols = c("PrevVDL"))
CorewStaticwExamwMRIwoVDL_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T, rmcols = c("PrevVDL"))
CorewStaticwExamwMRI_Imp <- combine(dfs = list(target, core, static, exam, MRI), imp = T)
#### H5 Save
#h5write(Core_Imp, filePath, "Core_Imp")
saveList <- c("CorewFam_Cut","CorewmodFam_Cut", "CorewStaticwoOW", "CorewStatic_Imp", "CorewStatic_Cut", "CorewStaticwFam_Cut", "CorewStaticwTreatment", "CorewStaticwGenetics_Imp", "CorewStaticwGenetics_Cut", "CorewStaticwMRI_Imp", "CorewStaticwExamwoVDL_Cut", "CorewStaticwExamwoVDL", "CorewStaticwExam_Imp", "CorewStaticwExam_Cut", "CorewStaticwExamwMRIwoT2LwoVDL_Imp", "CorewStaticwExamwMRIwoT2L_CutVDL_Imp", "CorewStaticwExamwMRIwoT2L_Imp", "CorewStaticwExamwMRIwoVDL_CutT2L_Imp", "CorewStaticwExamwMRIwoVDL_Imp", "CorewStaticwExamwMRI_Imp")
for (i in saveList){
h5write(get(i), filePath, getDfName(i, newModEDSS))
}
file.copy(filePath, filePathPython, overwrite = TRUE)
