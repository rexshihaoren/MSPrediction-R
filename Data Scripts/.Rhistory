dDay <-as.numeric(as.Date(pp[i+1,]$ExamDate) - as.Date(pp[i,]$ExamDate))
dYear <- dDay/365
oldEPIC <- pp[i, "EPICID"]
newEPIC <- pp[i+1, "EPICID"]
if (i == 1) {
pp0[i, "PrevSiena_PBVCRate"] <-0
}
if (oldEPIC != newEPIC){
pp0[i+1, "PrevSiena_PBVCRate"] <-0
} else {
pp0[i+1, "Siena_PBVCRate"] <- dSPBVC/dYear
pp0[i+1, "PrevSiena_PBVC"] <- pp0[i, "Siena_PBVC"]
pp0[i+1, "PrevSiena_PBVCRate"] <- pp0[i, "Siena_PBVCRate"]
}
if (oldEPIC == newEPIC){
pp[i+1, "Siena_PBVCRate"] <- dSPBVC/dYear
pp[i+1, "PrevSiena_PBVC"] <- pp[i, "Siena_PBVC"]
pp[i+1, "PrevSiena_PBVCRate"] <- pp[i, "Siena_PBVCRate"]
pp[i+1, "PrevDiseaseDuration"] <- pp[i, "DiseaseDuration"]
pp[i+1, "PrevNew_T2_Lesions"]<-pp[i, "New_T2_Lesions"]
}
}
# Extract VisitID and PrevSiena_PBVCRate from pp0
pp0idd<- pp0[, c('VisitID','PrevSiena_PBVCRate')]
#Remove
pp <- pp[, ! colnames(pp) %in% c("Siena_PBVC", "DiseaseDuration", "New_T2_Lesions", "Siena_PBVCRate")]
#Siena_PBVC remove 0 or NA
# pp <- pp[pp["PrevSiena_PBVC"]!=0, ]
# pp <- pp[!is.na(pp["PrevSiena_PBVC"]), ]
# merge with psidd
ppidd<-merge(pp,psidd)
# Seperate those with EPICID, VisitID and ExamDate and those without
diagnopp <-ppidd[, !(names(ppidd)%in%c("ExamDate","VisitID", "EPICID"))]
### Save #####
save(diagnopp, ppidd, pp0idd, file=ppPath)
h5write(diagnopp, filePath,"diagnopp")
file.copy(filePath, filePathPython, overwrite = TRUE)
#########Some additional features to add########
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
load("step0/result.RData")
load(ppPath)
DMT<-read.table("tableDMT.csv")
file.create(apPath)
####### reconstruct additional parameters ########
apnames <- c("MSSS", "GM_Volume", "OpticNeuritis", "VitaminD_Level", "Smoking")
fullTable32 <- fullTable32[!duplicated(fullTable32$VisitID),]
ap <- fullTable32[c("VisitID", "ExamDate", "EPICID", apnames)]
ap[, "MSSSRate"] <- NA
ap[, "GMVRate"] <- NA
ap[, "PrevMSSS"] <- NA
ap[, "PrevGMV"] <- NA
ap[, "PrevOpticNeuritis"]<-NA
ap[, "PrevMSSSRate"] <- NA
ap[, "PrevGMVRate"] <- NA
ap[, "PrevVDL"] <- NA
ap[, "PrevSmoking"] <- NA
ap <- ap[order(ap$EPICID, ap$ExamDate),]
# Dataframe where 0 is for PrevXXRate
ap0<-ap
#
nvisits <- nrow(ap)
newEPIC <- 0
for(i in 1:(nvisits-1)){
dMSSS <- ap[i+1, "MSSS"] - ap[i, "MSSS"]
dGMV <- ap[i+1, "GM_Volume"] - ap[i, "GM_Volume"]
dDay <-as.numeric(as.Date(ap[i+1,]$ExamDate) - as.Date(ap[i,]$ExamDate))
dYear <- dDay/365
oldEPIC <- ap[i, "EPICID"]
newEPIC <- ap[i+1, "EPICID"]
if (i ==1) {
newEPIC <- newEPIC+1
ap0[i, "PrevMSSSRate"] <- 0
ap0[i, "PrevGMVRate"] <- 0
}
if (oldEPIC != newEPIC) {
newEPIC <- newEPIC+1
ap0[i+1, "PrevMSSSRate"] <- 0
ap0[i+1, "PrevGMVRate"] <- 0
} else {
ap0[i+1, "MSSSRate"] <- dMSSS/dYear
ap0[i+1, "GMVRate"] <- dGMV/dYear
ap0[i+1, "PrevMSSS"] <- ap0[i, "MSSS"]
ap0[i+1, "PrevGMV"] <- ap0[i, "GM_Volume"]
ap0[i+1, "PrevMSSSRate"] <- ap0[i, "MSSSRate"]
ap0[i+1, "PrevGMVRate"] <- ap0[i, "GMVRate"]
}
if (oldEPIC == newEPIC){
ap[i+1, "MSSSRate"] <- dMSSS/dYear
ap[i+1, "GMVRate"] <- dGMV/dYear
ap[i+1, "PrevMSSS"] <- ap[i, "MSSS"]
ap[i+1, "PrevGMV"] <- ap[i, "GM_Volume"]
ap[i+1, "PrevOpticNeuritis"]<-ap[i, "OpticNeuritis"]
ap[i+1, "PrevVDL"] <- ap[i, "VitaminD_Level"]
ap[i+1, "PrevSmoking"]<-ap[i, "Smoking"]
ap[i+1, "PrevMSSSRate"] <- ap[i, "MSSSRate"]
ap[i+1, "PrevGMVRate"] <- ap[i, "GMVRate"]
}
}
# Extract VisitID, PrevMSSSRate and PrevGMVRate from ap0
ap0idd<- ap0[, c('VisitID','PrevMSSSRate','PrevGMVRate')]
#Remove
ap <- ap[, ! colnames(ap) %in% c("MSSS", "GM_Volume", "OpticNeuritis", "MSSSRate", "GMVRate", "VitaminD_Level", "Smoking")]
# merge with ppidd
apidd<-merge(ap,ppidd)
#apnoNA<-apnoidd[complete.cases(apnoNA),]
# Seperate those with EPICID, VisitID and ExamDate and those without
# diagnoap <-apnoNA[, !(names(apnoNA)%in%c("ExamDate","VisitID", "EPICID"))]
diagnoap <-apidd[, !(names(apidd)%in%c("ExamDate","VisitID", "EPICID"))]
# merge diagno0idd's PrevEDSSRate, pp0idd's PrevSiena_PBVCRate, and ap0idd's PrevMSSSRate and PrevGMVRate with everything else in apidd
load(diagnoPath)
load(ppPath)
ap0idd <- merge(diagno0idd, ap0idd)
ap0idd <- merge(ap0idd, pp0idd)
ap0idd <- merge(ap0idd, apidd[, !(names(apidd)%in%c('PrevEDSSRate','PrevSiena_PBVCRate','PrevMSSSRate','PrevGMVRate'))])
diagno0ap <- ap0idd[,!(names(ap0idd)%in%c("ExamDate","VisitID", "EPICID"))]
### Save #####
save(diagnoap, apidd, ap0idd, diagno0ap, file=apPath)
h5write(diagnoap, filePath,"diagnoap")
file.copy(filePath, filePathPython, overwrite = TRUE)
###### Impute dataset ######
#
#####Load diagnoap, apidd and DMwR package for kNNImpute#####
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
load(apPath)
file.create(imputePath)
##### Use KNN to impute everything except ModEDSS column #####
diagnofinal <- KnnImputeXY(diagnoap, c("ModEDSS"))
diagno0final <- KnnImputeXY(diagno0ap,c("ModEDSS"))
###### If only complete columns #####
diagnonoNA <- diagnoap[,colSums(is.na(diagno0ap))==0]
### Save #####
save(diagnofinal, diagno0final, diagnonoNA, file=imputePath)
h5write(diagnofinal, filePath,"diagnofinal")
h5write(diagno0final, filePath,"diagno0final")
h5write(diagnonoNA, filePath, "diagnonoNA")
file.copy(filePath, filePathPython, overwrite = TRUE)
###### Binarize fam2, modfam2 "EnjoyLife" Coloumn, w/ possible Dataprocessing to force data value to 0 to 1########
# Create
# Family of modfam2
# Family of fam2
# merged (merged from modfam2, fam2, and fullTalbe3)
# #######################################################
#
##### Set up ####################
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
if (! f){
file.remove(filePath)
h5createFile(filePath)
}
# create RData path
file.create(binarizePath)
#############################################
# get modified-fam2
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
####### Merge fam2, modfam2, fullTable3 ######
#First change fam2 colname "VisitId" to "VisitID"
fam2 <- rename(fam2, c("VisitId"="VisitID"))
# colnames(fam2)[colnames(fam2) == "VisitId"] <- "VisitID"
# For modfam2, get rid of column "X", and change "RelativePain" column to "modRelativePain" to avoid confusion when merging modfam2 and fam2
modfam2["X"] <- NULL
modfam2 <- rename(modfam2, c("RelativePain" = "modRelativePain"))
merged <- merge(fam2, modfam2)
merged <- merge(merged, fullTable3)
# For modfam2, only preserve 5 cols for analytic purpose: group1~3, relative-pain, enjoylife
modfam2<-modfam2[c("group1", "group2", "group3", "modRelativePain","EnjoyLife")]
# For fam2, get rid of VisitID
fam2["VisitID"]<- NULL
# Binarize
modfam2_bin <-Binarize(modfam2, "EnjoyLife")
fam2_bin <- Binarize(fam2, "EnjoyLife")
modfam2_processing <- DataProcessing(modfam2_bin, "EnjoyLife")
fam2_processing <- DataProcessing(fam2_bin, "EnjoyLife")
# Save fam2, modfam2, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, and  merged in HDF5 format
save(fam2, modfam2, merged, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, fullTable3, file=binarizePath)
h5write(fam2, filePath,"fam2")
h5write(modfam2,filePath,"modfam2")
h5write(merged, filePath, "merged")
h5write(fam2_bin, filePath,"fam2_bin")
h5write(modfam2_bin, filePath,"modfam2_bin")
h5write(modfam2_processing, filePath,"modfam2_processing")
h5write(fam2_processing, filePath,"fam2_processing")
# Copy predData.h5 to python folder
file.copy(filePath, filePathPython, overwrite = TRUE)
#############################################################
################# EDSS and Disgnostic ##################
## This should follow binarize.r ran ###
source("helper.r")
# merged <- h5read(filePath, "merged")
# fam2<-h5read(filePath, "fam2")
# modfam2 <- h5read (filePath, "modfam2")
load(binarizePath)
file.create(diagnoPath)
##################Calculate EDSS Rate + PrevEDSS + PrevEDSSRate cols###########
merged_updated <- merged[order(merged$EPICID, merged$ExamDate),]
##Treatment##
# DMT described all the treatment
DMT<-read.table("tableDMT.csv")
#DMTex <-DMT[,c("VisitID","START", "END", "TreatmentID")]
# List of all VisitIDs
DMTVisitIDs <- unique(DMT[["VisitID"]])
# Add Empty EDSSRate, PrevEDSS, PrevEDSSRate, PrevRecTreatment (Recieved treatment)
merged_updated[, "EDSSRate"] <- NA
merged_updated[, "PrevEDSS"] <- NA
merged_updated[, "PrevEDSSRate"] <- NA
merged_updated[, "PrevRecTreatment"] <- NA
# This is the dataframe I use 0 for PrevXXRate
merged_updated0<- merged_updated
nvisits <- nrow(merged_updated)
EPICIDls <- unique(merged_updated$EPICID)
for(i in 1:(nvisits-1)){
dEDSS <- merged_updated[i+1, "ActualEDSS"] - merged_updated[i, "ActualEDSS"]
dDay <-as.numeric(as.Date(merged_updated[i+1,]$ExamDate) - as.Date(merged_updated[i,]$ExamDate))
dYear <- dDay/365
oldEPIC <- merged_updated[i, "EPICID"]
newEPIC <- merged_updated[i+1, "EPICID"]
if (i == 1){
merged_updated0[i, "PrevEDSSRate"] <- 0
}
if (oldEPIC != newEPIC){
merged_updated0[i+1, "PrevEDSSRate"] <- 0
}else{
merged_updated0[i+1, "EDSSRate"] <- dEDSS/dYear
merged_updated0[i+1, "PrevEDSS"] <- merged_updated0[i, "ActualEDSS"]
merged_updated0[i+1, "PrevEDSSRate"] <- merged_updated0[i, "EDSSRate"]
}
if (oldEPIC == newEPIC){
merged_updated[i+1, "EDSSRate"] <- dEDSS/dYear
merged_updated[i+1, "PrevEDSS"] <- merged_updated[i, "ActualEDSS"]
merged_updated[i+1, "PrevEDSSRate"] <- merged_updated[i, "EDSSRate"]
merged_updated[i+1, "PrevRecTreatment"] <- merged_updated[i, "VisitID"] %in% DMTVisitIDs
}
}
######### Add one column 'ModEDSS' (modified EDSS), denoting whether EDSS increased ########
#if ignore abs dEDSSS < 0.5, or decrease = > Class 0; Otherwise => Class 1
# Add Imprecision col
merged_updated[, "Imprecision"] <- NA
merged_updated[, "ModEDSS"] <- NA
for(i in 1:(nvisits-1)){
dEDSS <- merged_updated[i+1, "ActualEDSS"] - merged_updated[i, "ActualEDSS"]
dDay <- as.numeric(as.Date(merged_updated[i+1,]$ExamDate) - as.Date(merged_updated[i,]$ExamDate))
dYear <- dDay/365
if (merged_updated[i+1, "EPICID"] == merged_updated[i, "EPICID"] ){
if (dEDSS< 0){
merged_updated[i+1, "ModEDSS"] <- 0
} else {
merged_updated[i+1, "ModEDSS"] <- 1
}
# if (abs(dEDSS) <= .5){
#   merged_updated[i+1, "Imprecision"] <- 1
#   merged_updated[i+1, "ModEDSS"] <- 0
# } else {
#   merged_updated[i+1, "Imprecision"] <- 0
#   if (dEDSS< 0){
#     merged_updated[i+1, "ModEDSS"] <- 0
#   } else {
#     merged_updated[i+1, "ModEDSS"] <- 1
#   }
# }
}
}
# Remove those with ModEDSS NA
merged_updated <- merged_updated[!is.na(merged_updated$ModEDSS),]
# DatePrep to use QOL(n) + EDSSRate(n-1) + EDSS(n-1) to predict ModEDSS: Diagnostic, n is exam date #
diagnoColName <- unique(c("VisitID","EPICID", "ExamDate", "PrevEDSS","ActualEDSS", "PrevEDSSRate", "EDSSRate", "ModEDSS", "Imprecision", "PrevRecTreatment", colnames(fam2)))
diagno <- merged_updated[diagnoColName]
#### Question:  Inclusion of mofam2/fam2 in training data & speed tradeoff #####
# Provide alternatives: if for every patient, we do tranformation from fam2 to modfam2, then we only include modfam2 in traning
diagnomodColName <- unique(c("VisitID","EPICID", "ExamDate", "PrevEDSS","ActualEDSS", "PrevEDSSRate", "EDSSRate", "ModEDSS", "Imprecision", "PrevRecTreatment", colnames(modfam2)))
diagnomod <- merged_updated[diagnomodColName]
### In real life, without the Physician, we wouldn't know ActualEDSS (therefore Imprecision) or EDSSRate, we only know PrevEDSSRate, PrevEDSS
# EPICID is useless for prediction as well
drop <- c('ActualEDSS','EDSSRate', 'Imprecision')
diagno <- diagno[,!(names(diagno) %in% drop)]
diagnomod <- diagnomod[,!(names(diagnomod) %in% drop)]
#### For diagnomod, try calculate rate for everything in the targetColList
targetColList <- c("group1","group2", "group3","modRelativePain", "EnjoyLife" )
diagnomodrate <- diagnomod
for (col in targetColList){
diagnomodrate <- calcRate(diagnomodrate, col, "ExamDate", "EPICID")
}
# ### For diagnomod, we remove patient's initial visit, because for now we can't predict without PrevEDSS;For the patient record with PrevEDSSRate NA, we assume it's 0;
# diagnomod<-diagnomod[- which( is.na(diagnomod['PrevEDSS'])),]
# diagnomod['PrevEDSSRate'][is.na(diagnomod['PrevEDSSRate']),] <- 0
# # same for diagno with fam2 only
# diagno<-diagno[- which( is.na(diagno['PrevEDSS'])),]
# diagno['PrevEDSSRate'][is.na(diagno['PrevEDSSRate']),] <- 0
# ### For diagnorate, we remove patient's initial visit, because for now we can't predict without PrevEDSS;For the patient record with PrevEDSSRate NA, we assume it's 0;
# diagnomodrate<-diagnomodrate[- which( is.na(diagnomodrate['PrevEDSS'])),]
# diagnomodrate['PrevEDSSRate'][is.na(diagnomodrate['PrevEDSSRate']),] <- 0
# Seperate those with EPICID, VisitID and ExamDate and those without
diagnoidd <- diagno
diagno <-diagno[, !(names(diagno)%in%c("ExamDate","VisitID", "EPICID"))]
diagnomodidd <- diagnomod
diagnomod <-diagnomod[, !(names(diagnomod)%in%c("ExamDate","VisitID", "EPICID"))]
diagnomodrateidd <- diagnomodrate
diagnomodrate <-diagnomodrate[, !(names(diagnomodrate)%in%c("ExamDate","VisitID", "EPICID"))]
# Simplified version with only 'PrevEDSS','ModEDSS','PrevEDSSRate'
get <- c('PrevEDSS','ModEDSS','PrevEDSSRate')
diagnosim <- diagno[get]
# Extract merged_updated0's VisitID and PrevEDSSRate
diagno0idd <- merged_updated0[,c('VisitID', 'PrevEDSSRate')]
##### save to diagno.RData ###
save(merged_updated, diagno, diagnoidd, diagno0idd, diagnomod, diagnomodidd, diagnomodrate, diagnomodrateidd, diagnosim, file=diagnoPath)
###### h5 save #######
h5write(merged_updated, filePath,"merged_updated")
h5write(diagno, filePath,"diagno")
h5write(diagnoidd, filePath,"diagnoidd")
h5write(diagnomod, filePath,"diagnomod")
h5write(diagnomodidd, filePath,"diagnomodidd")
h5write(diagnomodrate, filePath,"diagnomodrate")
h5write(diagnomodrateidd, filePath,"diagnomodrateidd")
h5write(diagnosim, filePath,"diagnosim")
file.copy(filePath, filePathPython, overwrite = TRUE)
###### Add patient specific (ps) to diagno #######
####### Load more features from fullTable32 #########
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
load("step0/result.RData")
load(diagnoPath)
file.create(psPath)
####### merge patient specific (ps) to diagno ###
#psnames <- c('AgeOfOnset', 'Gender', 'DRB1_1501', 'OnsetToYr5RelapseCount')
psnames <- c('AgeOfOnset', 'Overweight', 'DRB1_1501', 'OnsetToYr5RelapseCount')
# Remove Duplicated VisitID
fullTable32 <- fullTable32[!duplicated(fullTable32$VisitID),]
ps <- fullTable32[c(psnames, "VisitID")]
ps <- merge(ps, diagnoidd)
# digitize gender
#ps[["Gender"]]<- ifelse(ps[["Gender"]] == "M", 1, 0)
#Overweight remove NA and digitize
#ps <- ps[!is.na(ps["Overweight"]), ]
#Overweight digitize
ps[["Overweight"]]<- ifelse(ps[["Overweight"]] == "Yes", 1, 0)
# Seperate those with EPICID, VisitID and ExamDate and those without
psidd <- ps
diagnops <-ps[, !(names(ps)%in%c("ExamDate","VisitID", "EPICID"))]
### Save #####
save(diagnops, psidd, file=psPath)
h5write(diagnops, filePath,"diagnops")
file.copy(filePath, filePathPython, overwrite = TRUE)
###### Add more Previous year parameters to diagno #######
####### Load more features from fullTable32 and DMT #########
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
load("step0/result.RData")
load(psPath)
DMT<-read.table("tableDMT.csv")
file.create(ppPath)
####### reconstruct previous year parameters ########
ppnames <- c("DiseaseDuration", "Siena_PBVC", "New_T2_Lesions")
fullTable32 <- fullTable32[!duplicated(fullTable32$VisitID),]
pp <- fullTable32[c("VisitID", "ExamDate", "EPICID", ppnames)]
#pp <- merge(DMT[c("VisitID", "TreatmentMolecule")], pp)
pp[, "Siena_PBVCRate"] <- NA
pp[, "PrevSiena_PBVC"] <- NA
pp[, "PrevSiena_PBVCRate"] <- NA
# pp[, "PrevTreatmentM"] <- NA
# pp[, "PrevTreatmentT"] <- NA
pp[, "PrevDiseaseDuration"] <- NA
pp[, "PrevNew_T2_Lesions"]<-NA
pp <- pp[order(pp$EPICID, pp$ExamDate),]
# Dataframe where 0 is for PrevXXRate
pp0 <- pp
#
nvisits <- nrow(pp)
for(i in 1:(nvisits-1)){
dSPBVC <- pp[i+1, "Siena_PBVC"] - pp[i, "Siena_PBVC"]
dDay <-as.numeric(as.Date(pp[i+1,]$ExamDate) - as.Date(pp[i,]$ExamDate))
dYear <- dDay/365
oldEPIC <- pp[i, "EPICID"]
newEPIC <- pp[i+1, "EPICID"]
if (i == 1) {
pp0[i, "PrevSiena_PBVCRate"] <-0
}
if (oldEPIC != newEPIC){
pp0[i+1, "PrevSiena_PBVCRate"] <-0
} else {
pp0[i+1, "Siena_PBVCRate"] <- dSPBVC/dYear
pp0[i+1, "PrevSiena_PBVC"] <- pp0[i, "Siena_PBVC"]
pp0[i+1, "PrevSiena_PBVCRate"] <- pp0[i, "Siena_PBVCRate"]
}
if (oldEPIC == newEPIC){
pp[i+1, "Siena_PBVCRate"] <- dSPBVC/dYear
pp[i+1, "PrevSiena_PBVC"] <- pp[i, "Siena_PBVC"]
pp[i+1, "PrevSiena_PBVCRate"] <- pp[i, "Siena_PBVCRate"]
pp[i+1, "PrevDiseaseDuration"] <- pp[i, "DiseaseDuration"]
pp[i+1, "PrevNew_T2_Lesions"]<-pp[i, "New_T2_Lesions"]
}
}
# Extract VisitID and PrevSiena_PBVCRate from pp0
pp0idd<- pp0[, c('VisitID','PrevSiena_PBVCRate')]
#Remove
pp <- pp[, ! colnames(pp) %in% c("Siena_PBVC", "DiseaseDuration", "New_T2_Lesions", "Siena_PBVCRate")]
#Siena_PBVC remove 0 or NA
# pp <- pp[pp["PrevSiena_PBVC"]!=0, ]
# pp <- pp[!is.na(pp["PrevSiena_PBVC"]), ]
# merge with psidd
ppidd<-merge(pp,psidd)
# Seperate those with EPICID, VisitID and ExamDate and those without
diagnopp <-ppidd[, !(names(ppidd)%in%c("ExamDate","VisitID", "EPICID"))]
### Save #####
save(diagnopp, ppidd, pp0idd, file=ppPath)
h5write(diagnopp, filePath,"diagnopp")
file.copy(filePath, filePathPython, overwrite = TRUE)
#########Some additional features to add########
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
load("step0/result.RData")
load(ppPath)
DMT<-read.table("tableDMT.csv")
file.create(apPath)
####### reconstruct additional parameters ########
apnames <- c("MSSS", "GM_Volume", "OpticNeuritis", "VitaminD_Level", "Smoking")
fullTable32 <- fullTable32[!duplicated(fullTable32$VisitID),]
ap <- fullTable32[c("VisitID", "ExamDate", "EPICID", apnames)]
ap[, "MSSSRate"] <- NA
ap[, "GMVRate"] <- NA
ap[, "PrevMSSS"] <- NA
ap[, "PrevGMV"] <- NA
ap[, "PrevOpticNeuritis"]<-NA
ap[, "PrevMSSSRate"] <- NA
ap[, "PrevGMVRate"] <- NA
ap[, "PrevVDL"] <- NA
ap[, "PrevSmoking"] <- NA
ap <- ap[order(ap$EPICID, ap$ExamDate),]
# Dataframe where 0 is for PrevXXRate
ap0<-ap
#
nvisits <- nrow(ap)
newEPIC <- 0
for(i in 1:(nvisits-1)){
dMSSS <- ap[i+1, "MSSS"] - ap[i, "MSSS"]
dGMV <- ap[i+1, "GM_Volume"] - ap[i, "GM_Volume"]
dDay <-as.numeric(as.Date(ap[i+1,]$ExamDate) - as.Date(ap[i,]$ExamDate))
dYear <- dDay/365
oldEPIC <- ap[i, "EPICID"]
newEPIC <- ap[i+1, "EPICID"]
if (i ==1) {
newEPIC <- newEPIC+1
ap0[i, "PrevMSSSRate"] <- 0
ap0[i, "PrevGMVRate"] <- 0
}
if (oldEPIC != newEPIC) {
newEPIC <- newEPIC+1
ap0[i+1, "PrevMSSSRate"] <- 0
ap0[i+1, "PrevGMVRate"] <- 0
} else {
ap0[i+1, "MSSSRate"] <- dMSSS/dYear
ap0[i+1, "GMVRate"] <- dGMV/dYear
ap0[i+1, "PrevMSSS"] <- ap0[i, "MSSS"]
ap0[i+1, "PrevGMV"] <- ap0[i, "GM_Volume"]
ap0[i+1, "PrevMSSSRate"] <- ap0[i, "MSSSRate"]
ap0[i+1, "PrevGMVRate"] <- ap0[i, "GMVRate"]
}
if (oldEPIC == newEPIC){
ap[i+1, "MSSSRate"] <- dMSSS/dYear
ap[i+1, "GMVRate"] <- dGMV/dYear
ap[i+1, "PrevMSSS"] <- ap[i, "MSSS"]
ap[i+1, "PrevGMV"] <- ap[i, "GM_Volume"]
ap[i+1, "PrevOpticNeuritis"]<-ap[i, "OpticNeuritis"]
ap[i+1, "PrevVDL"] <- ap[i, "VitaminD_Level"]
ap[i+1, "PrevSmoking"]<-ap[i, "Smoking"]
ap[i+1, "PrevMSSSRate"] <- ap[i, "MSSSRate"]
ap[i+1, "PrevGMVRate"] <- ap[i, "GMVRate"]
}
}
# Extract VisitID, PrevMSSSRate and PrevGMVRate from ap0
ap0idd<- ap0[, c('VisitID','PrevMSSSRate','PrevGMVRate')]
#Remove
ap <- ap[, ! colnames(ap) %in% c("MSSS", "GM_Volume", "OpticNeuritis", "MSSSRate", "GMVRate", "VitaminD_Level", "Smoking")]
# merge with ppidd
apidd<-merge(ap,ppidd)
#apnoNA<-apnoidd[complete.cases(apnoNA),]
# Seperate those with EPICID, VisitID and ExamDate and those without
# diagnoap <-apnoNA[, !(names(apnoNA)%in%c("ExamDate","VisitID", "EPICID"))]
diagnoap <-apidd[, !(names(apidd)%in%c("ExamDate","VisitID", "EPICID"))]
# merge diagno0idd's PrevEDSSRate, pp0idd's PrevSiena_PBVCRate, and ap0idd's PrevMSSSRate and PrevGMVRate with everything else in apidd
load(diagnoPath)
load(ppPath)
ap0idd <- merge(diagno0idd, ap0idd)
ap0idd <- merge(ap0idd, pp0idd)
ap0idd <- merge(ap0idd, apidd[, !(names(apidd)%in%c('PrevEDSSRate','PrevSiena_PBVCRate','PrevMSSSRate','PrevGMVRate'))])
diagno0ap <- ap0idd[,!(names(ap0idd)%in%c("ExamDate","VisitID", "EPICID"))]
### Save #####
save(diagnoap, apidd, ap0idd, diagno0ap, file=apPath)
h5write(diagnoap, filePath,"diagnoap")
file.copy(filePath, filePathPython, overwrite = TRUE)
###### Impute dataset ######
#
#####Load diagnoap, apidd and DMwR package for kNNImpute#####
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
load(apPath)
file.create(imputePath)
##### Use KNN to impute everything except ModEDSS column #####
diagnofinal <- KnnImputeXY(diagnoap, c("ModEDSS"))
diagno0final <- KnnImputeXY(diagno0ap,c("ModEDSS"))
###### If only complete columns #####
diagnonoNA <- diagnoap[,colSums(is.na(diagno0ap))==0]
### Save #####
save(diagnofinal, diagno0final, diagnonoNA, file=imputePath)
h5write(diagnofinal, filePath,"diagnofinal")
h5write(diagno0final, filePath,"diagno0final")
h5write(diagnonoNA, filePath, "diagnonoNA")
file.copy(filePath, filePathPython, overwrite = TRUE)
