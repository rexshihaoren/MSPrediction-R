#
# Set up
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
if (! f){
file.remove(filePath)
h5createFile(filePath)
}
# get modified-fam2
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
####### Merge fam2, modfam2, fullTable3 ######
#First change fam2 colname "VisitId" to "VisitID"
fam2 <- rename(fam2, c("VisitId"="VisitID"))
# colnames(fam2)[colnames(fam2) == "VisitId"] <- "VisitID"
# For modfam2, get rid of column "X", and change "RelativePain" column to "modRelativePain" to avoid confusion when merging modfam2 and fam2
modfam2["X"] <- NULL
modfam2 <- rename(modfam2, c("RelativePain" = "modRelativePain"))
merged <- merge(fam2, modfam2)
merged <- merge(merged, fullTable3)
# For modfam2, only preserve 5 cols for analytic purpose: group1~3, relative-pain, enjoylife
modfam2<-modfam2[c("group1", "group2", "group3", "modRelativePain","EnjoyLife")]
# For fam2, get rid of VisitID
fam2["VisitID"]<- NULL
# Binarize
modfam2_bin <-Binarize(modfam2, "EnjoyLife")
fam2_bin <- Binarize(fam2, "EnjoyLife")
modfam2_processing <- DataProcessing(modfam2_bin, "EnjoyLife")
fam2_processing <- DataProcessing(fam2_bin, "EnjoyLife")
# Save fam2, modfam2, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, and  merged in HDF5 format
h5write(fam2, filePath,"fam2")
h5write(modfam2,filePath,"modfam2")
h5write(merged, filePath, "merged")
h5write(fam2_bin, filePath,"fam2_bin")
h5write(modfam2_bin, filePath,"modfam2_bin")
h5write(modfam2_processing, filePath,"modfam2_processing")
h5write(fam2_processing, filePath,"fam2_processing")
# Copy predData.h5 to python folder
file.copy(filePath, filePathPython, overwrite = TRUE)
str(modfam2_bin)
str(fam2_bin)
# Plot Fitted Histogram for fam2 with 'norm' normal distribution
for (cname in colnames(fam2_bin)){
if (cname != "EnjoyLife"){
print(cname)
fitCPDF(fam2_bin, cname, "EnjoyLife", "norm", geom_histogram, "mme")
}
}
dfs <- c("modfam2", "fam2", "modfam2_bin", "fam2_bin")
for (i in dfs)
assign(i, h5read(filePath, i))
View(fam2_bin)
str(fam2_bin)
for (cname in colnames(fam2_bin)){
if (cname != "EnjoyLife"){
print(cname)
fitCPDF(fam2_bin, cname, "EnjoyLife", "norm", geom_histogram, "mme")
}
}
rex<- fam_bin[drop = True]
rex<- fam2_bin[drop = True]
rex<- droplevels(fam2_bin)
str(rex)
rex< -unlist(rex)
str(rex)
rex< -apply(rex, 1, function(x) as.numeric(x))
str(rex)
str(modfam2)
str(modfam2_processing)
str(fam2_processing)
###### Binarize fam2, modfam2 "EnjoyLife" Coloumn, w/ possible Dataprocessing to force data value to 0 to 1########
# Create
# Family of modfam2
# Family of fam2
# merged (merged from modfam2, fam2, and fullTalbe3)
# #######################################################
#
# Set up
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
if (! f){
file.remove(filePath)
h5createFile(filePath)
}
# get modified-fam2
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
####### Merge fam2, modfam2, fullTable3 ######
#First change fam2 colname "VisitId" to "VisitID"
fam2 <- rename(fam2, c("VisitId"="VisitID"))
# colnames(fam2)[colnames(fam2) == "VisitId"] <- "VisitID"
# For modfam2, get rid of column "X", and change "RelativePain" column to "modRelativePain" to avoid confusion when merging modfam2 and fam2
modfam2["X"] <- NULL
modfam2 <- rename(modfam2, c("RelativePain" = "modRelativePain"))
merged <- merge(fam2, modfam2)
merged <- merge(merged, fullTable3)
# For modfam2, only preserve 5 cols for analytic purpose: group1~3, relative-pain, enjoylife
modfam2<-modfam2[c("group1", "group2", "group3", "modRelativePain","EnjoyLife")]
# For fam2, get rid of VisitID
fam2["VisitID"]<- NULL
# Binarize
modfam2_bin <-Binarize(modfam2, "EnjoyLife")
fam2_bin <- Binarize(fam2, "EnjoyLife")
modfam2_processing <- DataProcessing(modfam2_bin, "EnjoyLife")
fam2_processing <- DataProcessing(fam2_bin, "EnjoyLife")
# Save fam2, modfam2, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, and  merged in HDF5 format
h5write(fam2, filePath,"fam2")
h5write(modfam2,filePath,"modfam2")
h5write(merged, filePath, "merged")
h5write(fam2_bin, filePath,"fam2_bin")
h5write(modfam2_bin, filePath,"modfam2_bin")
h5write(modfam2_processing, filePath,"modfam2_processing")
h5write(fam2_processing, filePath,"fam2_processing")
# Copy predData.h5 to python folder
file.copy(filePath, filePathPython, overwrite = TRUE)
str(fam2_processing)
str(fam2_bin)
for (cname in colnames(fam2_bin)){
if (cname != "EnjoyLife"){
print(cname)
fitCPDF(fam2_bin, cname, "EnjoyLife", "norm", geom_histogram, "mme")
}
}
for (i in dfs)
assign(i, h5read(filePath, i))
str(fam2_bin)
for (i in dfs)
assign(i, h5read(filePath, i))
###### Binarize fam2, modfam2 "EnjoyLife" Coloumn, w/ possible Dataprocessing to force data value to 0 to 1########
# Create
# Family of modfam2
# Family of fam2
# merged (merged from modfam2, fam2, and fullTalbe3)
# #######################################################
#
# Set up
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
if (! f){
file.remove(filePath)
h5createFile(filePath)
}
# get modified-fam2
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
####### Merge fam2, modfam2, fullTable3 ######
#First change fam2 colname "VisitId" to "VisitID"
fam2 <- rename(fam2, c("VisitId"="VisitID"))
# colnames(fam2)[colnames(fam2) == "VisitId"] <- "VisitID"
# For modfam2, get rid of column "X", and change "RelativePain" column to "modRelativePain" to avoid confusion when merging modfam2 and fam2
modfam2["X"] <- NULL
modfam2 <- rename(modfam2, c("RelativePain" = "modRelativePain"))
merged <- merge(fam2, modfam2)
merged <- merge(merged, fullTable3)
# For modfam2, only preserve 5 cols for analytic purpose: group1~3, relative-pain, enjoylife
modfam2<-modfam2[c("group1", "group2", "group3", "modRelativePain","EnjoyLife")]
# For fam2, get rid of VisitID
fam2["VisitID"]<- NULL
# Binarize
modfam2_bin <-Binarize(modfam2, "EnjoyLife")
fam2_bin <- Binarize(fam2, "EnjoyLife")
modfam2_processing <- DataProcessing(modfam2_bin, "EnjoyLife")
fam2_processing <- DataProcessing(fam2_bin, "EnjoyLife")
# Save fam2, modfam2, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, and  merged in HDF5 format
h5write(fam2, filePath,"fam2")
h5write(modfam2,filePath,"modfam2")
h5write(merged, filePath, "merged")
h5write(fam2_bin, filePath,"fam2_bin")
h5write(modfam2_bin, filePath,"modfam2_bin")
h5write(modfam2_processing, filePath,"modfam2_processing")
h5write(fam2_processing, filePath,"fam2_processing")
# Copy predData.h5 to python folder
file.copy(filePath, filePathPython, overwrite = TRUE)
######## Examples using msplot functions###############
source("helper.r")
###Examples for modfam2, fam2, merged ####
dfs <- c("modfam2", "fam2", "modfam2_bin", "fam2_bin")
for (i in dfs)
assign(i, h5read(filePath, i))
str(modfam2_bin)
str(modfam2)
str(fam2)
str(fam2_processing)
###### Binarize fam2, modfam2 "EnjoyLife" Coloumn, w/ possible Dataprocessing to force data value to 0 to 1########
# Create
# Family of modfam2
# Family of fam2
# merged (merged from modfam2, fam2, and fullTalbe3)
# #######################################################
#
# Set up
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
if (! f){
file.remove(filePath)
h5createFile(filePath)
}
# get modified-fam2
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
####### Merge fam2, modfam2, fullTable3 ######
#First change fam2 colname "VisitId" to "VisitID"
fam2 <- rename(fam2, c("VisitId"="VisitID"))
# colnames(fam2)[colnames(fam2) == "VisitId"] <- "VisitID"
# For modfam2, get rid of column "X", and change "RelativePain" column to "modRelativePain" to avoid confusion when merging modfam2 and fam2
modfam2["X"] <- NULL
modfam2 <- rename(modfam2, c("RelativePain" = "modRelativePain"))
merged <- merge(fam2, modfam2)
merged <- merge(merged, fullTable3)
# For modfam2, only preserve 5 cols for analytic purpose: group1~3, relative-pain, enjoylife
modfam2<-modfam2[c("group1", "group2", "group3", "modRelativePain","EnjoyLife")]
# For fam2, get rid of VisitID
fam2["VisitID"]<- NULL
# Binarize
modfam2_bin <-Binarize(modfam2, "EnjoyLife")
fam2_bin <- Binarize(fam2, "EnjoyLife")
modfam2_processing <- DataProcessing(modfam2_bin, "EnjoyLife")
fam2_processing <- DataProcessing(fam2_bin, "EnjoyLife")
# Save fam2, modfam2, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, and  merged in HDF5 format
h5write(fam2, filePath,"fam2")
h5write(modfam2,filePath,"modfam2")
h5write(merged, filePath, "merged")
h5write(fam2_bin, filePath,"fam2_bin")
h5write(modfam2_bin, filePath,"modfam2_bin")
h5write(modfam2_processing, filePath,"modfam2_processing")
h5write(fam2_processing, filePath,"fam2_processing")
# Copy predData.h5 to python folder
file.copy(filePath, filePathPython, overwrite = TRUE)
######## Examples using msplot functions###############
source("helper.r")
###Examples for modfam2, fam2, merged ####
dfs <- c("modfam2", "fam2", "modfam2_bin", "fam2_bin")
for (i in dfs)
assign(i, h5read(filePath, i))
str(fam2_processing)
str(fam2)
str(fam2_bin)
###### Binarize fam2, modfam2 "EnjoyLife" Coloumn, w/ possible Dataprocessing to force data value to 0 to 1########
# Create
# Family of modfam2
# Family of fam2
# merged (merged from modfam2, fam2, and fullTalbe3)
# #######################################################
#
# Set up
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
if (! f){
file.remove(filePath)
h5createFile(filePath)
}
# get modified-fam2
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
####### Merge fam2, modfam2, fullTable3 ######
#First change fam2 colname "VisitId" to "VisitID"
fam2 <- rename(fam2, c("VisitId"="VisitID"))
# colnames(fam2)[colnames(fam2) == "VisitId"] <- "VisitID"
# For modfam2, get rid of column "X", and change "RelativePain" column to "modRelativePain" to avoid confusion when merging modfam2 and fam2
modfam2["X"] <- NULL
modfam2 <- rename(modfam2, c("RelativePain" = "modRelativePain"))
merged <- merge(fam2, modfam2)
merged <- merge(merged, fullTable3)
# For modfam2, only preserve 5 cols for analytic purpose: group1~3, relative-pain, enjoylife
modfam2<-modfam2[c("group1", "group2", "group3", "modRelativePain","EnjoyLife")]
# For fam2, get rid of VisitID
fam2["VisitID"]<- NULL
# Binarize
modfam2_bin <-Binarize(modfam2, "EnjoyLife")
fam2_bin <- Binarize(fam2, "EnjoyLife")
modfam2_processing <- DataProcessing(modfam2_bin, "EnjoyLife")
fam2_processing <- DataProcessing(fam2_bin, "EnjoyLife")
# Save fam2, modfam2, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, and  merged in HDF5 format
h5write(fam2, filePath,"fam2")
h5write(modfam2,filePath,"modfam2")
h5write(merged, filePath, "merged")
h5write(fam2_bin, filePath,"fam2_bin")
h5write(modfam2_bin, filePath,"modfam2_bin")
h5write(modfam2_processing, filePath,"modfam2_processing")
h5write(fam2_processing, filePath,"fam2_processing")
# Copy predData.h5 to python folder
file.copy(filePath, filePathPython, overwrite = TRUE)
######## Examples using msplot functions###############
source("helper.r")
###Examples for modfam2, fam2, merged ####
dfs <- c("modfam2", "fam2", "modfam2_bin", "fam2_bin")
for (i in dfs)
assign(i, h5read(filePath, i))
#### All the functions needed for MSBioScreen-R ######
### Packages ####
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
filePath <- 'data/predData.h5'
filePathPython <- '../../MSPrediction-Python/data/'
require(ggplot2)
require(rhdf5)
require(MASS)
require(fitdistrplus)
require(plyr)
require(RMySOL)
Binarize <- function(df, target){
# to Binarize a target column of a datafram
med <- median(df[, target])
bin <- apply(df, c(1,2), function(x) x/1.00)
#bin[, target] <- ifelse(bin[, target]<=med, 0, 1)
bin[, target] <- apply(bin[, target], c(1,2), function(x) if x<= med 0 else 1)
as.data.frame(bin)
}
DataProcessing <- function(df, target = ""){
# Processing a data frame to make everything (0, 1] except the target col
if (target == ""){
loc <- ncol(df)+1
} else{
loc <- grep(target, colnames(df))
}
processing <- df
processing <- apply(processing, 2, function(x) (x-min(x))/(max(x)-min(x)))
processing[,-loc] <- apply(processing[,-loc], c(1,2), function(x) if (x == 0) x+1e-12 else x)
as.data.frame(processing)
}
### Testing add column rate of everything ####
calcRate<-function(df, colName, tColName, index){
# Add a rate column of a target column within index, an identity
#
# Args:
#   df: dataset
#   colName: target col name
#   tColName: time col name
#   index: id col name
#
# Returns:
#
if (!is.numeric(df[, colName]))
df[, tcolName]<-as.numeric(df[, tcolName])
nvisits <- nrow(df)
newColName <- paste(colName, "Rate", sep = "")
df[,newColName] <- NA
for(i in 1:(nvisits-1)){
dDiff <- df[i+1, colName] - df[i, colName]
dDay <- df[i+1,tColName] - df[i,tColName]
dYear <- dDay/365
if (df[i+1, index] == df[i, index] ){
df[i+1, newColName] <- dDiff/dYear
}
}
newdf <- df
return(newdf)
}
###### Plotting Functions for Statistical Analysis#############
gendist<-function(somedf, plotfunc, target, filename){
# Plotting distribution (histogram/density) given a dataframe and a target column, and a filename
# Args:
#    somdf: dataframe
#    plotfunc: geom_histogram or geom_density
#    target: target column
#    filename: filename given to the hitogram to generate
#
# Returns:
#   hitogram on target column
pfname = deparse(substitute(plotfunc))
filepath = paste("plots/",paste(filename, pfname, sep = "_"), ".pdf",sep="")
somedf_noNA <- somedf[!is.na(somedf[target]),]
ggplot(somedf_noNA) + plotfunc(aes_string(x=target))
ggsave(file=filepath)
}
generateCPDF<-function(somedf, plotfunc, target){
# Plot Conditional PDF
dfname = deparse(substitute(somedf))
pfname = deparse(substitute(plotfunc))
for (i in colnames(somedf)){
if (i != target){
if (pfname == "geom_density"){
ggplot(somedf) + plotfunc(aes_string(x=i, group = target, fill= target), alpha = 0.8)
} else {
ggplot(somedf) + plotfunc(aes_string(x=i, group = target, fill = target), position = "dodge")
}
fpath = paste("plots/",paste(dfname, "cpdf",i, sep = "_"), ".pdf", sep="")
ggsave(file = fpath)
}
}
}
fitCPDF<- function(df, xname, yname, f, plotfunc, method, start = NULL){
# Fitting Conditional pdf on top of histogram, and save that plot.
#
# Args:
#   df: dataset
#   xname: target col name
#   yname: condition col name
#   f: string that indicated the density function put on top of the histogram
#   plotfunc: original data plot, geom_hitogram or geom_density
#   method: the character string coding for the fitting method
#
# Returns:
#   Model conditional pdf
dfname = deparse(substitute(df))
pfname = deparse(substitute(plotfunc))
xcol <- df[[xname]]
ycol <- df[[yname]]
xrange <- unique(xcol)
yrange <- unique(ycol)
xlen <- length(xrange)
ylen <- length(yrange)
sf <- list()
for (i in range(1,ylen)){
condData <- xcol[ycol == yrange[i]]
params <- c(fitdist(condData, f, method, start = start)$estimate)
# This step is IMPORTANT
dfunc = match.fun(paste('d', f, sep = ''))
if(pfname == "geom_histogram"){
sf[[i]] = stat_function(fun = dfunc, n = xlen, args = params, lty = "dashed")
}else{
sf[[i]] = stat_function(fun = dfunc, args = params, lty = "dashed")
}
}
if (pfname == "geom_histogram"){
ggplot(df) +
plotfunc(aes_string(y="..density.. * 0.1", x=xname, group = yname, fill=yname), binwidth=0.1, position="dodge", width = 2) +
sf
} else {
if (f == "beta"){
ggplot(df) +
plotfunc(aes_string(x=xname, group = yname, group = yname, fill=yname), alpha = .8) +
sf + scale_x_continuous(limits = c(0,1))
} else {
ggplot(df) +
plotfunc(aes_string(x=xname, group = yname, group = yname, fill=yname), alpha = .8) +
sf
}
}
# Save plots
fpath = paste("plots/",paste(dfname, "fitcpdf", xname,"on",yname, f, sep = "_"), ".pdf", sep="")
ggsave(file = fpath)
}
# # List of density functions
# densfunlist <- c("norm", "exp", "gamma", "nbinom", "geom", "beta", "logis", "nbinorm")
# # TODO??
# PickBestFit <- function(x, method){
#   # Fit the best density functions out of densfunlist
#   # Args:
#   #   x: a numeric vector
#   #   method: the character string coding for the fitting method
#   # Returns:
#   #   fitdistr obj with the best performance based on estimated standard error mean
#   errlist <- list()
#   for (f in densfunlist){
#     obj <- fitdist(x, f)
#     stderror <- obj$sd[1]
#     errlist[stderror] <- obj
#   }
# }
###### Binarize fam2, modfam2 "EnjoyLife" Coloumn, w/ possible Dataprocessing to force data value to 0 to 1########
# Create
# Family of modfam2
# Family of fam2
# merged (merged from modfam2, fam2, and fullTalbe3)
# #######################################################
#
# Set up
setwd("~/Dropbox/research/MSBioScreen/MSPrediction-R/Data Scripts")
source("helper.r")
f <- h5createFile(filePath)
# If 'data/predData.h5' exists, overwrite it
if (! f){
file.remove(filePath)
h5createFile(filePath)
}
# get modified-fam2
modfam2<-read.csv("step3/data_all.csv")
# fetch original fam2
load("step1/result.RData")
####### Merge fam2, modfam2, fullTable3 ######
#First change fam2 colname "VisitId" to "VisitID"
fam2 <- rename(fam2, c("VisitId"="VisitID"))
# colnames(fam2)[colnames(fam2) == "VisitId"] <- "VisitID"
# For modfam2, get rid of column "X", and change "RelativePain" column to "modRelativePain" to avoid confusion when merging modfam2 and fam2
modfam2["X"] <- NULL
modfam2 <- rename(modfam2, c("RelativePain" = "modRelativePain"))
merged <- merge(fam2, modfam2)
merged <- merge(merged, fullTable3)
# For modfam2, only preserve 5 cols for analytic purpose: group1~3, relative-pain, enjoylife
modfam2<-modfam2[c("group1", "group2", "group3", "modRelativePain","EnjoyLife")]
# For fam2, get rid of VisitID
fam2["VisitID"]<- NULL
# Binarize
modfam2_bin <-Binarize(modfam2, "EnjoyLife")
fam2_bin <- Binarize(fam2, "EnjoyLife")
modfam2_processing <- DataProcessing(modfam2_bin, "EnjoyLife")
fam2_processing <- DataProcessing(fam2_bin, "EnjoyLife")
# Save fam2, modfam2, fam2_bin, modfam2_bin, modfam2_processing, fam2_processing, and  merged in HDF5 format
h5write(fam2, filePath,"fam2")
h5write(modfam2,filePath,"modfam2")
h5write(merged, filePath, "merged")
h5write(fam2_bin, filePath,"fam2_bin")
h5write(modfam2_bin, filePath,"modfam2_bin")
h5write(modfam2_processing, filePath,"modfam2_processing")
h5write(fam2_processing, filePath,"fam2_processing")
# Copy predData.h5 to python folder
file.copy(filePath, filePathPython, overwrite = TRUE)
